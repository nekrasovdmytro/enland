<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
  <duplication lines="64" tokens="145">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="3358"/>
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="4237"/>
    <codefragment>        return $this-&gt;services['web_profiler.controller.profiler'] = new \Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController($this-&gt;get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this-&gt;get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this-&gt;get('twig'), array('data_collector.request' =&gt; array(0 =&gt; 'request', 1 =&gt; '@WebProfiler/Collector/request.html.twig'), 'data_collector.time' =&gt; array(0 =&gt; 'time', 1 =&gt; '@WebProfiler/Collector/time.html.twig'), 'data_collector.memory' =&gt; array(0 =&gt; 'memory', 1 =&gt; '@WebProfiler/Collector/memory.html.twig'), 'data_collector.ajax' =&gt; array(0 =&gt; 'ajax', 1 =&gt; '@WebProfiler/Collector/ajax.html.twig'), 'data_collector.form' =&gt; array(0 =&gt; 'form', 1 =&gt; '@WebProfiler/Collector/form.html.twig'), 'data_collector.exception' =&gt; array(0 =&gt; 'exception', 1 =&gt; '@WebProfiler/Collector/exception.html.twig'), 'data_collector.logger' =&gt; array(0 =&gt; 'logger', 1 =&gt; '@WebProfiler/Collector/logger.html.twig'), 'data_collector.events' =&gt; array(0 =&gt; 'events', 1 =&gt; '@WebProfiler/Collector/events.html.twig'), 'data_collector.router' =&gt; array(0 =&gt; 'router', 1 =&gt; '@WebProfiler/Collector/router.html.twig'), 'data_collector.translation' =&gt; array(0 =&gt; 'translation', 1 =&gt; '@WebProfiler/Collector/translation.html.twig'), 'data_collector.security' =&gt; array(0 =&gt; 'security', 1 =&gt; '@Security/Collector/security.html.twig'), 'data_collector.twig' =&gt; array(0 =&gt; 'twig', 1 =&gt; '@WebProfiler/Collector/twig.html.twig'), 'data_collector.doctrine' =&gt; array(0 =&gt; 'db', 1 =&gt; '@Doctrine/Collector/db.html.twig'), 'swiftmailer.data_collector' =&gt; array(0 =&gt; 'swiftmailer', 1 =&gt; '@Swiftmailer/Collector/swiftmailer.html.twig'), 'data_collector.dump' =&gt; array(0 =&gt; 'dump', 1 =&gt; '@Debug/Profiler/dump.html.twig'), 'data_collector.config' =&gt; array(0 =&gt; 'config', 1 =&gt; '@WebProfiler/Collector/config.html.twig')), 'bottom');
    }

    /**
     * Gets the 'web_profiler.controller.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\RouterController A Symfony\Bundle\WebProfilerBundle\Controller\RouterController instance.
     */
    protected function getWebProfiler_Controller_RouterService()
    {
        return $this-&gt;services['web_profiler.controller.router'] = new \Symfony\Bundle\WebProfilerBundle\Controller\RouterController($this-&gt;get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this-&gt;get('twig'), $this-&gt;get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'web_profiler.debug_toolbar' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener A Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener instance.
     */
    protected function getWebProfiler_DebugToolbarService()
    {
        return $this-&gt;services['web_profiler.debug_toolbar'] = new \Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener($this-&gt;get('twig'), false, 2, 'bottom', $this-&gt;get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE), '^/(app(_[\\w]+)?\\.php/)?_wdt');
    }

    /**
     * Gets the 'assetic.asset_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\AsseticBundle\Factory\AssetFactory A Symfony\Bundle\AsseticBundle\Factory\AssetFactory instance.
     */
    protected function getAssetic_AssetFactoryService()
    {
        $this-&gt;services['assetic.asset_factory'] = $instance = new \Symfony\Bundle\AsseticBundle\Factory\AssetFactory($this-&gt;get('kernel'), $this, $this-&gt;getParameterBag(), ($this-&gt;targetDirs[2].'/../web'), true);

        $instance-&gt;addWorker(new \Symfony\Bundle\AsseticBundle\Factory\Worker\UseControllerWorker());

        return $instance;
    }

    /**
     * Gets the 'controller_name_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser A Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser instance.
     */
    protected function getControllerNameConverterService()
    {
</codefragment>
  </duplication>
  <duplication lines="196" tokens="583">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="17"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="17"/>
    <codefragment>class appDevDebugProjectContainer extends Container
{
    private $parameters;
    private $targetDirs = array();

    /**
     * Constructor.
     */
    public function __construct()
    {
        $dir = __DIR__;
        for ($i = 1; $i &lt;= 4; ++$i) {
            $this-&gt;targetDirs[$i] = $dir = dirname($dir);
        }
        $this-&gt;parameters = $this-&gt;getDefaultParameters();

        $this-&gt;services =
        $this-&gt;scopedServices =
        $this-&gt;scopeStacks = array();
        $this-&gt;scopes = array('request' =&gt; 'container');
        $this-&gt;scopeChildren = array('request' =&gt; array());
        $this-&gt;methodMap = array(
            'annotation_reader' =&gt; 'getAnnotationReaderService',
            'assetic.asset_factory' =&gt; 'getAssetic_AssetFactoryService',
            'assetic.asset_manager' =&gt; 'getAssetic_AssetManagerService',
            'assetic.controller' =&gt; 'getAssetic_ControllerService',
            'assetic.filter.cssrewrite' =&gt; 'getAssetic_Filter_CssrewriteService',
            'assetic.filter_manager' =&gt; 'getAssetic_FilterManagerService',
            'assetic.request_listener' =&gt; 'getAssetic_RequestListenerService',
            'assets.context' =&gt; 'getAssets_ContextService',
            'assets.packages' =&gt; 'getAssets_PackagesService',
            'cache_clearer' =&gt; 'getCacheClearerService',
            'cache_warmer' =&gt; 'getCacheWarmerService',
            'config_cache_factory' =&gt; 'getConfigCacheFactoryService',
            'controller_name_converter' =&gt; 'getControllerNameConverterService',
            'data_collector.dump' =&gt; 'getDataCollector_DumpService',
            'data_collector.form' =&gt; 'getDataCollector_FormService',
            'data_collector.form.extractor' =&gt; 'getDataCollector_Form_ExtractorService',
            'data_collector.request' =&gt; 'getDataCollector_RequestService',
            'data_collector.router' =&gt; 'getDataCollector_RouterService',
            'data_collector.translation' =&gt; 'getDataCollector_TranslationService',
            'debug.controller_resolver' =&gt; 'getDebug_ControllerResolverService',
            'debug.debug_handlers_listener' =&gt; 'getDebug_DebugHandlersListenerService',
            'debug.dump_listener' =&gt; 'getDebug_DumpListenerService',
            'debug.event_dispatcher' =&gt; 'getDebug_EventDispatcherService',
            'debug.stopwatch' =&gt; 'getDebug_StopwatchService',
            'doctrine' =&gt; 'getDoctrineService',
            'doctrine.dbal.connection_factory' =&gt; 'getDoctrine_Dbal_ConnectionFactoryService',
            'doctrine.dbal.default_connection' =&gt; 'getDoctrine_Dbal_DefaultConnectionService',
            'doctrine.dbal.logger.profiling.default' =&gt; 'getDoctrine_Dbal_Logger_Profiling_DefaultService',
            'doctrine.orm.default_entity_listener_resolver' =&gt; 'getDoctrine_Orm_DefaultEntityListenerResolverService',
            'doctrine.orm.default_entity_manager' =&gt; 'getDoctrine_Orm_DefaultEntityManagerService',
            'doctrine.orm.default_listeners.attach_entity_listeners' =&gt; 'getDoctrine_Orm_DefaultListeners_AttachEntityListenersService',
            'doctrine.orm.default_manager_configurator' =&gt; 'getDoctrine_Orm_DefaultManagerConfiguratorService',
            'doctrine.orm.validator.unique' =&gt; 'getDoctrine_Orm_Validator_UniqueService',
            'doctrine.orm.validator_initializer' =&gt; 'getDoctrine_Orm_ValidatorInitializerService',
            'doctrine_cache.providers.doctrine.orm.default_metadata_cache' =&gt; 'getDoctrineCache_Providers_Doctrine_Orm_DefaultMetadataCacheService',
            'doctrine_cache.providers.doctrine.orm.default_query_cache' =&gt; 'getDoctrineCache_Providers_Doctrine_Orm_DefaultQueryCacheService',
            'doctrine_cache.providers.doctrine.orm.default_result_cache' =&gt; 'getDoctrineCache_Providers_Doctrine_Orm_DefaultResultCacheService',
            'file_locator' =&gt; 'getFileLocatorService',
            'filesystem' =&gt; 'getFilesystemService',
            'form.csrf_provider' =&gt; 'getForm_CsrfProviderService',
            'form.factory' =&gt; 'getForm_FactoryService',
            'form.registry' =&gt; 'getForm_RegistryService',
            'form.resolved_type_factory' =&gt; 'getForm_ResolvedTypeFactoryService',
            'form.type.birthday' =&gt; 'getForm_Type_BirthdayService',
            'form.type.button' =&gt; 'getForm_Type_ButtonService',
            'form.type.checkbox' =&gt; 'getForm_Type_CheckboxService',
            'form.type.choice' =&gt; 'getForm_Type_ChoiceService',
            'form.type.collection' =&gt; 'getForm_Type_CollectionService',
            'form.type.country' =&gt; 'getForm_Type_CountryService',
            'form.type.currency' =&gt; 'getForm_Type_CurrencyService',
            'form.type.date' =&gt; 'getForm_Type_DateService',
            'form.type.datetime' =&gt; 'getForm_Type_DatetimeService',
            'form.type.email' =&gt; 'getForm_Type_EmailService',
            'form.type.entity' =&gt; 'getForm_Type_EntityService',
            'form.type.file' =&gt; 'getForm_Type_FileService',
            'form.type.form' =&gt; 'getForm_Type_FormService',
            'form.type.hidden' =&gt; 'getForm_Type_HiddenService',
            'form.type.integer' =&gt; 'getForm_Type_IntegerService',
            'form.type.language' =&gt; 'getForm_Type_LanguageService',
            'form.type.locale' =&gt; 'getForm_Type_LocaleService',
            'form.type.money' =&gt; 'getForm_Type_MoneyService',
            'form.type.number' =&gt; 'getForm_Type_NumberService',
            'form.type.password' =&gt; 'getForm_Type_PasswordService',
            'form.type.percent' =&gt; 'getForm_Type_PercentService',
            'form.type.radio' =&gt; 'getForm_Type_RadioService',
            'form.type.range' =&gt; 'getForm_Type_RangeService',
            'form.type.repeated' =&gt; 'getForm_Type_RepeatedService',
            'form.type.reset' =&gt; 'getForm_Type_ResetService',
            'form.type.search' =&gt; 'getForm_Type_SearchService',
            'form.type.submit' =&gt; 'getForm_Type_SubmitService',
            'form.type.text' =&gt; 'getForm_Type_TextService',
            'form.type.textarea' =&gt; 'getForm_Type_TextareaService',
            'form.type.time' =&gt; 'getForm_Type_TimeService',
            'form.type.timezone' =&gt; 'getForm_Type_TimezoneService',
            'form.type.url' =&gt; 'getForm_Type_UrlService',
            'form.type_extension.csrf' =&gt; 'getForm_TypeExtension_CsrfService',
            'form.type_extension.form.data_collector' =&gt; 'getForm_TypeExtension_Form_DataCollectorService',
            'form.type_extension.form.http_foundation' =&gt; 'getForm_TypeExtension_Form_HttpFoundationService',
            'form.type_extension.form.validator' =&gt; 'getForm_TypeExtension_Form_ValidatorService',
            'form.type_extension.repeated.validator' =&gt; 'getForm_TypeExtension_Repeated_ValidatorService',
            'form.type_extension.submit.validator' =&gt; 'getForm_TypeExtension_Submit_ValidatorService',
            'form.type_guesser.doctrine' =&gt; 'getForm_TypeGuesser_DoctrineService',
            'form.type_guesser.validator' =&gt; 'getForm_TypeGuesser_ValidatorService',
            'fragment.handler' =&gt; 'getFragment_HandlerService',
            'fragment.listener' =&gt; 'getFragment_ListenerService',
            'fragment.renderer.esi' =&gt; 'getFragment_Renderer_EsiService',
            'fragment.renderer.hinclude' =&gt; 'getFragment_Renderer_HincludeService',
            'fragment.renderer.inline' =&gt; 'getFragment_Renderer_InlineService',
            'fragment.renderer.ssi' =&gt; 'getFragment_Renderer_SsiService',
            'http_kernel' =&gt; 'getHttpKernelService',
            'kernel' =&gt; 'getKernelService',
            'kernel.class_cache.cache_warmer' =&gt; 'getKernel_ClassCache_CacheWarmerService',
            'locale_listener' =&gt; 'getLocaleListenerService',
            'logger' =&gt; 'getLoggerService',
            'monolog.handler.console' =&gt; 'getMonolog_Handler_ConsoleService',
            'monolog.handler.console_very_verbose' =&gt; 'getMonolog_Handler_ConsoleVeryVerboseService',
            'monolog.handler.debug' =&gt; 'getMonolog_Handler_DebugService',
            'monolog.handler.main' =&gt; 'getMonolog_Handler_MainService',
            'monolog.logger.assetic' =&gt; 'getMonolog_Logger_AsseticService',
            'monolog.logger.doctrine' =&gt; 'getMonolog_Logger_DoctrineService',
            'monolog.logger.event' =&gt; 'getMonolog_Logger_EventService',
            'monolog.logger.php' =&gt; 'getMonolog_Logger_PhpService',
            'monolog.logger.profiler' =&gt; 'getMonolog_Logger_ProfilerService',
            'monolog.logger.request' =&gt; 'getMonolog_Logger_RequestService',
            'monolog.logger.router' =&gt; 'getMonolog_Logger_RouterService',
            'monolog.logger.security' =&gt; 'getMonolog_Logger_SecurityService',
            'monolog.logger.templating' =&gt; 'getMonolog_Logger_TemplatingService',
            'monolog.logger.translation' =&gt; 'getMonolog_Logger_TranslationService',
            'profiler' =&gt; 'getProfilerService',
            'profiler_listener' =&gt; 'getProfilerListenerService',
            'property_accessor' =&gt; 'getPropertyAccessorService',
            'request' =&gt; 'getRequestService',
            'request_stack' =&gt; 'getRequestStackService',
            'response_listener' =&gt; 'getResponseListenerService',
            'router' =&gt; 'getRouterService',
            'router.request_context' =&gt; 'getRouter_RequestContextService',
            'router_listener' =&gt; 'getRouterListenerService',
            'routing.loader' =&gt; 'getRouting_LoaderService',
            'security.access.decision_manager' =&gt; 'getSecurity_Access_DecisionManagerService',
            'security.authentication.guard_handler' =&gt; 'getSecurity_Authentication_GuardHandlerService',
            'security.authentication.manager' =&gt; 'getSecurity_Authentication_ManagerService',
            'security.authentication.trust_resolver' =&gt; 'getSecurity_Authentication_TrustResolverService',
            'security.authentication_utils' =&gt; 'getSecurity_AuthenticationUtilsService',
            'security.authorization_checker' =&gt; 'getSecurity_AuthorizationCheckerService',
            'security.context' =&gt; 'getSecurity_ContextService',
            'security.csrf.token_manager' =&gt; 'getSecurity_Csrf_TokenManagerService',
            'security.encoder_factory' =&gt; 'getSecurity_EncoderFactoryService',
            'security.firewall' =&gt; 'getSecurity_FirewallService',
            'security.firewall.map.context.dev' =&gt; 'getSecurity_Firewall_Map_Context_DevService',
            'security.firewall.map.context.main' =&gt; 'getSecurity_Firewall_Map_Context_MainService',
            'security.logout_url_generator' =&gt; 'getSecurity_LogoutUrlGeneratorService',
            'security.password_encoder' =&gt; 'getSecurity_PasswordEncoderService',
            'security.rememberme.response_listener' =&gt; 'getSecurity_Rememberme_ResponseListenerService',
            'security.role_hierarchy' =&gt; 'getSecurity_RoleHierarchyService',
            'security.secure_random' =&gt; 'getSecurity_SecureRandomService',
            'security.token_storage' =&gt; 'getSecurity_TokenStorageService',
            'security.user_checker.main' =&gt; 'getSecurity_UserChecker_MainService',
            'security.validator.user_password' =&gt; 'getSecurity_Validator_UserPasswordService',
            'sensio_distribution.security_checker' =&gt; 'getSensioDistribution_SecurityCheckerService',
            'sensio_distribution.security_checker.command' =&gt; 'getSensioDistribution_SecurityChecker_CommandService',
            'sensio_framework_extra.cache.listener' =&gt; 'getSensioFrameworkExtra_Cache_ListenerService',
            'sensio_framework_extra.controller.listener' =&gt; 'getSensioFrameworkExtra_Controller_ListenerService',
            'sensio_framework_extra.converter.datetime' =&gt; 'getSensioFrameworkExtra_Converter_DatetimeService',
            'sensio_framework_extra.converter.doctrine.orm' =&gt; 'getSensioFrameworkExtra_Converter_Doctrine_OrmService',
            'sensio_framework_extra.converter.listener' =&gt; 'getSensioFrameworkExtra_Converter_ListenerService',
            'sensio_framework_extra.converter.manager' =&gt; 'getSensioFrameworkExtra_Converter_ManagerService',
            'sensio_framework_extra.security.listener' =&gt; 'getSensioFrameworkExtra_Security_ListenerService',
            'sensio_framework_extra.view.guesser' =&gt; 'getSensioFrameworkExtra_View_GuesserService',
            'sensio_framework_extra.view.listener' =&gt; 'getSensioFrameworkExtra_View_ListenerService',
            'service_container' =&gt; 'getServiceContainerService',
            'session' =&gt; 'getSessionService',
            'session.save_listener' =&gt; 'getSession_SaveListenerService',
            'session.storage.filesystem' =&gt; 'getSession_Storage_FilesystemService',
            'session.storage.metadata_bag' =&gt; 'getSession_Storage_MetadataBagService',
            'session.storage.native' =&gt; 'getSession_Storage_NativeService',
            'session.storage.php_bridge' =&gt; 'getSession_Storage_PhpBridgeService',
            'session_listener' =&gt; 'getSessionListenerService',
            'streamed_response_listener' =&gt; 'getStreamedResponseListenerService',
            'swiftmailer.email_sender.listener' =&gt; 'getSwiftmailer_EmailSender_ListenerService',
            'swiftmailer.mailer.default' =&gt; 'getSwiftmailer_Mailer_DefaultService',
            'swiftmailer.mailer.default.plugin.messagelogger' =&gt; 'getSwiftmailer_Mailer_Default_Plugin_MessageloggerService',
            'swiftmailer.mailer.default.spool' =&gt; 'getSwiftmailer_Mailer_Default_SpoolService',
            'swiftmailer.mailer.default.transport' =&gt; 'getSwiftmailer_Mailer_Default_TransportService',
            'swiftmailer.mailer.default.transport.eventdispatcher' =&gt; 'getSwiftmailer_Mailer_Default_Transport_EventdispatcherService',
            'swiftmailer.mailer.default.transport.real' =&gt; 'getSwiftmailer_Mailer_Default_Transport_RealService',
            'templating' =&gt; 'getTemplatingService',
            'templating.filename_parser' =&gt; 'getTemplating_FilenameParserService',
            'templating.helper.assets' =&gt; 'getTemplating_Helper_AssetsService',
            'templating.helper.logout_url' =&gt; 'getTemplating_Helper_LogoutUrlService',
            'templating.helper.router' =&gt; 'getTemplating_Helper_RouterService',
            'templating.helper.security' =&gt; 'getTemplating_Helper_SecurityService',
            'templating.loader' =&gt; 'getTemplating_LoaderService',
            'templating.locator' =&gt; 'getTemplating_LocatorService',
            'templating.name_parser' =&gt; 'getTemplating_NameParserService',
</codefragment>
  </duplication>
  <duplication lines="45" tokens="135">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="213"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="217"/>
    <codefragment>            'translation.dumper.csv' =&gt; 'getTranslation_Dumper_CsvService',
            'translation.dumper.ini' =&gt; 'getTranslation_Dumper_IniService',
            'translation.dumper.json' =&gt; 'getTranslation_Dumper_JsonService',
            'translation.dumper.mo' =&gt; 'getTranslation_Dumper_MoService',
            'translation.dumper.php' =&gt; 'getTranslation_Dumper_PhpService',
            'translation.dumper.po' =&gt; 'getTranslation_Dumper_PoService',
            'translation.dumper.qt' =&gt; 'getTranslation_Dumper_QtService',
            'translation.dumper.res' =&gt; 'getTranslation_Dumper_ResService',
            'translation.dumper.xliff' =&gt; 'getTranslation_Dumper_XliffService',
            'translation.dumper.yml' =&gt; 'getTranslation_Dumper_YmlService',
            'translation.extractor' =&gt; 'getTranslation_ExtractorService',
            'translation.extractor.php' =&gt; 'getTranslation_Extractor_PhpService',
            'translation.loader' =&gt; 'getTranslation_LoaderService',
            'translation.loader.csv' =&gt; 'getTranslation_Loader_CsvService',
            'translation.loader.dat' =&gt; 'getTranslation_Loader_DatService',
            'translation.loader.ini' =&gt; 'getTranslation_Loader_IniService',
            'translation.loader.json' =&gt; 'getTranslation_Loader_JsonService',
            'translation.loader.mo' =&gt; 'getTranslation_Loader_MoService',
            'translation.loader.php' =&gt; 'getTranslation_Loader_PhpService',
            'translation.loader.po' =&gt; 'getTranslation_Loader_PoService',
            'translation.loader.qt' =&gt; 'getTranslation_Loader_QtService',
            'translation.loader.res' =&gt; 'getTranslation_Loader_ResService',
            'translation.loader.xliff' =&gt; 'getTranslation_Loader_XliffService',
            'translation.loader.yml' =&gt; 'getTranslation_Loader_YmlService',
            'translation.writer' =&gt; 'getTranslation_WriterService',
            'translator' =&gt; 'getTranslatorService',
            'translator.default' =&gt; 'getTranslator_DefaultService',
            'translator_listener' =&gt; 'getTranslatorListenerService',
            'twig' =&gt; 'getTwigService',
            'twig.controller.exception' =&gt; 'getTwig_Controller_ExceptionService',
            'twig.controller.preview_error' =&gt; 'getTwig_Controller_PreviewErrorService',
            'twig.exception_listener' =&gt; 'getTwig_ExceptionListenerService',
            'twig.loader' =&gt; 'getTwig_LoaderService',
            'twig.profile' =&gt; 'getTwig_ProfileService',
            'twig.translation.extractor' =&gt; 'getTwig_Translation_ExtractorService',
            'uri_signer' =&gt; 'getUriSignerService',
            'validator' =&gt; 'getValidatorService',
            'validator.builder' =&gt; 'getValidator_BuilderService',
            'validator.email' =&gt; 'getValidator_EmailService',
            'validator.expression' =&gt; 'getValidator_ExpressionService',
            'var_dumper.cli_dumper' =&gt; 'getVarDumper_CliDumperService',
            'var_dumper.cloner' =&gt; 'getVarDumper_ClonerService',
            'web_profiler.controller.exception' =&gt; 'getWebProfiler_Controller_ExceptionService',
            'web_profiler.controller.profiler' =&gt; 'getWebProfiler_Controller_ProfilerService',
            'web_profiler.controller.router' =&gt; 'getWebProfiler_Controller_RouterService',
</codefragment>
  </duplication>
  <duplication lines="195" tokens="1094">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="270"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="273"/>
    <codefragment>            'swiftmailer.mailer' =&gt; 'swiftmailer.mailer.default',
            'swiftmailer.plugin.messagelogger' =&gt; 'swiftmailer.mailer.default.plugin.messagelogger',
            'swiftmailer.spool' =&gt; 'swiftmailer.mailer.default.spool',
            'swiftmailer.transport' =&gt; 'swiftmailer.mailer.default.transport',
            'swiftmailer.transport.real' =&gt; 'swiftmailer.mailer.default.transport.real',
        );
    }

    /**
     * {@inheritdoc}
     */
    public function compile()
    {
        throw new LogicException('You cannot compile a dumped frozen container.');
    }

    /**
     * Gets the 'annotation_reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Annotations\CachedReader A Doctrine\Common\Annotations\CachedReader instance.
     */
    protected function getAnnotationReaderService()
    {
        return $this-&gt;services['annotation_reader'] = new \Doctrine\Common\Annotations\CachedReader(new \Doctrine\Common\Annotations\AnnotationReader(), new \Doctrine\Common\Cache\FilesystemCache((__DIR__.'/annotations')), true);
    }

    /**
     * Gets the 'assetic.asset_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Assetic\Factory\LazyAssetManager A Assetic\Factory\LazyAssetManager instance.
     */
    protected function getAssetic_AssetManagerService()
    {
        $a = $this-&gt;get('templating.loader');

        $this-&gt;services['assetic.asset_manager'] = $instance = new \Assetic\Factory\LazyAssetManager($this-&gt;get('assetic.asset_factory'), array('twig' =&gt; new \Assetic\Factory\Loader\CachedFormulaLoader(new \Assetic\Extension\Twig\TwigFormulaLoader($this-&gt;get('twig'), $this-&gt;get('monolog.logger.assetic', ContainerInterface::NULL_ON_INVALID_REFERENCE)), new \Assetic\Cache\ConfigCache((__DIR__.'/assetic/config')), true)));

        $instance-&gt;addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FrameworkBundle', ($this-&gt;targetDirs[2].'/Resources/FrameworkBundle/views'), '/\\.[^.]+\\.twig$/'), 1 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'FrameworkBundle', ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance-&gt;addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SecurityBundle', ($this-&gt;targetDirs[2].'/Resources/SecurityBundle/views'), '/\\.[^.]+\\.twig$/'), 1 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SecurityBundle', ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance-&gt;addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'TwigBundle', ($this-&gt;targetDirs[2].'/Resources/TwigBundle/views'), '/\\.[^.]+\\.twig$/'), 1 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'TwigBundle', ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance-&gt;addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'MonologBundle', ($this-&gt;targetDirs[2].'/Resources/MonologBundle/views'), '/\\.[^.]+\\.twig$/'), 1 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'MonologBundle', ($this-&gt;targetDirs[3].'/vendor/symfony/monolog-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance-&gt;addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SwiftmailerBundle', ($this-&gt;targetDirs[2].'/Resources/SwiftmailerBundle/views'), '/\\.[^.]+\\.twig$/'), 1 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SwiftmailerBundle', ($this-&gt;targetDirs[3].'/vendor/symfony/swiftmailer-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance-&gt;addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'DoctrineBundle', ($this-&gt;targetDirs[2].'/Resources/DoctrineBundle/views'), '/\\.[^.]+\\.twig$/'), 1 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'DoctrineBundle', ($this-&gt;targetDirs[3].'/vendor/doctrine/doctrine-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance-&gt;addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SensioFrameworkExtraBundle', ($this-&gt;targetDirs[2].'/Resources/SensioFrameworkExtraBundle/views'), '/\\.[^.]+\\.twig$/'), 1 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SensioFrameworkExtraBundle', ($this-&gt;targetDirs[3].'/vendor/sensio/framework-extra-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance-&gt;addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'AsseticBundle', ($this-&gt;targetDirs[2].'/Resources/AsseticBundle/views'), '/\\.[^.]+\\.twig$/'), 1 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'AsseticBundle', ($this-&gt;targetDirs[3].'/vendor/symfony/assetic-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance-&gt;addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'AppBundle', ($this-&gt;targetDirs[2].'/Resources/AppBundle/views'), '/\\.[^.]+\\.twig$/'), 1 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'AppBundle', ($this-&gt;targetDirs[3].'/src/AppBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance-&gt;addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'WordBundle', ($this-&gt;targetDirs[2].'/Resources/WordBundle/views'), '/\\.[^.]+\\.twig$/'), 1 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'WordBundle', ($this-&gt;targetDirs[3].'/src/WordBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance-&gt;addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'DebugBundle', ($this-&gt;targetDirs[2].'/Resources/DebugBundle/views'), '/\\.[^.]+\\.twig$/'), 1 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'DebugBundle', ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/DebugBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance-&gt;addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'WebProfilerBundle', ($this-&gt;targetDirs[2].'/Resources/WebProfilerBundle/views'), '/\\.[^.]+\\.twig$/'), 1 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'WebProfilerBundle', ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance-&gt;addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SensioDistributionBundle', ($this-&gt;targetDirs[2].'/Resources/SensioDistributionBundle/views'), '/\\.[^.]+\\.twig$/'), 1 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SensioDistributionBundle', ($this-&gt;targetDirs[3].'/vendor/sensio/distribution-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance-&gt;addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SensioGeneratorBundle', ($this-&gt;targetDirs[2].'/Resources/SensioGeneratorBundle/views'), '/\\.[^.]+\\.twig$/'), 1 =&gt; new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'SensioGeneratorBundle', ($this-&gt;targetDirs[3].'/vendor/sensio/generator-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance-&gt;addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, '', ($this-&gt;targetDirs[2].'/Resources/views'), '/\\.[^.]+\\.twig$/'), 'twig');

        return $instance;
    }

    /**
     * Gets the 'assetic.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\AsseticBundle\Controller\AsseticController A Symfony\Bundle\AsseticBundle\Controller\AsseticController instance.
     */
    protected function getAssetic_ControllerService()
    {
        return $this-&gt;services['assetic.controller'] = new \Symfony\Bundle\AsseticBundle\Controller\AsseticController($this-&gt;get('assetic.asset_manager'), new \Assetic\Cache\FilesystemCache((__DIR__.'/assetic/assets')), false, $this-&gt;get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'assetic.filter.cssrewrite' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Assetic\Filter\CssRewriteFilter A Assetic\Filter\CssRewriteFilter instance.
     */
    protected function getAssetic_Filter_CssrewriteService()
    {
        return $this-&gt;services['assetic.filter.cssrewrite'] = new \Assetic\Filter\CssRewriteFilter();
    }

    /**
     * Gets the 'assetic.filter_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\AsseticBundle\FilterManager A Symfony\Bundle\AsseticBundle\FilterManager instance.
     */
    protected function getAssetic_FilterManagerService()
    {
        return $this-&gt;services['assetic.filter_manager'] = new \Symfony\Bundle\AsseticBundle\FilterManager($this, array('cssrewrite' =&gt; 'assetic.filter.cssrewrite'));
    }

    /**
     * Gets the 'assetic.request_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\AsseticBundle\EventListener\RequestListener A Symfony\Bundle\AsseticBundle\EventListener\RequestListener instance.
     */
    protected function getAssetic_RequestListenerService()
    {
        return $this-&gt;services['assetic.request_listener'] = new \Symfony\Bundle\AsseticBundle\EventListener\RequestListener();
    }

    /**
     * Gets the 'assets.context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Asset\Context\RequestStackContext A Symfony\Component\Asset\Context\RequestStackContext instance.
     */
    protected function getAssets_ContextService()
    {
        return $this-&gt;services['assets.context'] = new \Symfony\Component\Asset\Context\RequestStackContext($this-&gt;get('request_stack'));
    }

    /**
     * Gets the 'assets.packages' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Asset\Packages A Symfony\Component\Asset\Packages instance.
     */
    protected function getAssets_PackagesService()
    {
        return $this-&gt;services['assets.packages'] = new \Symfony\Component\Asset\Packages(new \Symfony\Component\Asset\PathPackage('', new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy(), $this-&gt;get('assets.context')), array());
    }

    /**
     * Gets the 'cache_clearer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer A Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer instance.
     */
    protected function getCacheClearerService()
    {
        return $this-&gt;services['cache_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer(array());
    }

    /**
     * Gets the 'cache_warmer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate A Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate instance.
     */
    protected function getCacheWarmerService()
    {
        $a = $this-&gt;get('kernel');
        $b = $this-&gt;get('templating.filename_parser');

        $c = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TemplateFinder($a, $b, ($this-&gt;targetDirs[2].'/Resources'));

        return $this-&gt;services['cache_warmer'] = new \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate(array(0 =&gt; new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TemplatePathsCacheWarmer($c, $this-&gt;get('templating.locator')), 1 =&gt; new \Symfony\Bundle\AsseticBundle\CacheWarmer\AssetManagerCacheWarmer($this), 2 =&gt; $this-&gt;get('kernel.class_cache.cache_warmer'), 3 =&gt; new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TranslationsCacheWarmer($this-&gt;get('translator.default')), 4 =&gt; new \Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer($this-&gt;get('router')), 5 =&gt; new \Symfony\Bundle\TwigBundle\CacheWarmer\TemplateCacheCacheWarmer($this, $c, array()), 6 =&gt; new \Symfony\Bundle\TwigBundle\CacheWarmer\TemplateCacheWarmer($this-&gt;get('twig'), new \Symfony\Bundle\TwigBundle\TemplateIterator($a, $this-&gt;targetDirs[2], array())), 7 =&gt; new \Symfony\Bridge\Doctrine\CacheWarmer\ProxyCacheWarmer($this-&gt;get('doctrine'))));
    }

    /**
     * Gets the 'config_cache_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Config\ResourceCheckerConfigCacheFactory A Symfony\Component\Config\ResourceCheckerConfigCacheFactory instance.
     */
    protected function getConfigCacheFactoryService()
    {
        return $this-&gt;services['config_cache_factory'] = new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory(array(0 =&gt; new \Symfony\Component\Config\Resource\SelfCheckingResourceChecker(), 1 =&gt; new \Symfony\Component\Config\Resource\BCResourceInterfaceChecker()));
    }

    /**
     * Gets the 'data_collector.dump' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\DumpDataCollector A Symfony\Component\HttpKernel\DataCollector\DumpDataCollector instance.
     */
    protected function getDataCollector_DumpService()
    {
        return $this-&gt;services['data_collector.dump'] = new \Symfony\Component\HttpKernel\DataCollector\DumpDataCollector($this-&gt;get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE), NULL, 'UTF-8', $this-&gt;get('request_stack'), NULL);
</codefragment>
  </duplication>
  <duplication lines="126" tokens="243">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="464"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="467"/>
    <codefragment>        return $this-&gt;services['data_collector.dump'] = new \Symfony\Component\HttpKernel\DataCollector\DumpDataCollector($this-&gt;get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE), NULL, 'UTF-8', $this-&gt;get('request_stack'), NULL);
    }

    /**
     * Gets the 'data_collector.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\FormDataCollector A Symfony\Component\Form\Extension\DataCollector\FormDataCollector instance.
     */
    protected function getDataCollector_FormService()
    {
        return $this-&gt;services['data_collector.form'] = new \Symfony\Component\Form\Extension\DataCollector\FormDataCollector($this-&gt;get('data_collector.form.extractor'));
    }

    /**
     * Gets the 'data_collector.form.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\FormDataExtractor A Symfony\Component\Form\Extension\DataCollector\FormDataExtractor instance.
     */
    protected function getDataCollector_Form_ExtractorService()
    {
        return $this-&gt;services['data_collector.form.extractor'] = new \Symfony\Component\Form\Extension\DataCollector\FormDataExtractor();
    }

    /**
     * Gets the 'data_collector.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\RequestDataCollector A Symfony\Component\HttpKernel\DataCollector\RequestDataCollector instance.
     */
    protected function getDataCollector_RequestService()
    {
        return $this-&gt;services['data_collector.request'] = new \Symfony\Component\HttpKernel\DataCollector\RequestDataCollector();
    }

    /**
     * Gets the 'data_collector.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector A Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector instance.
     */
    protected function getDataCollector_RouterService()
    {
        return $this-&gt;services['data_collector.router'] = new \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector();
    }

    /**
     * Gets the 'data_collector.translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\DataCollector\TranslationDataCollector A Symfony\Component\Translation\DataCollector\TranslationDataCollector instance.
     */
    protected function getDataCollector_TranslationService()
    {
        return $this-&gt;services['data_collector.translation'] = new \Symfony\Component\Translation\DataCollector\TranslationDataCollector($this-&gt;get('translator'));
    }

    /**
     * Gets the 'debug.controller_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver A Symfony\Component\HttpKernel\Controller\TraceableControllerResolver instance.
     */
    protected function getDebug_ControllerResolverService()
    {
        return $this-&gt;services['debug.controller_resolver'] = new \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver(new \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver($this, $this-&gt;get('controller_name_converter'), $this-&gt;get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE)), $this-&gt;get('debug.stopwatch'));
    }

    /**
     * Gets the 'debug.debug_handlers_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener A Symfony\Component\HttpKernel\EventListener\DebugHandlersListener instance.
     */
    protected function getDebug_DebugHandlersListenerService()
    {
        return $this-&gt;services['debug.debug_handlers_listener'] = new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, $this-&gt;get('monolog.logger.php', ContainerInterface::NULL_ON_INVALID_REFERENCE), NULL, NULL, true, NULL);
    }

    /**
     * Gets the 'debug.dump_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DumpListener A Symfony\Component\HttpKernel\EventListener\DumpListener instance.
     */
    protected function getDebug_DumpListenerService()
    {
        return $this-&gt;services['debug.dump_listener'] = new \Symfony\Component\HttpKernel\EventListener\DumpListener($this-&gt;get('var_dumper.cloner'), $this-&gt;get('data_collector.dump'));
    }

    /**
     * Gets the 'debug.event_dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher A Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher instance.
     */
    protected function getDebug_EventDispatcherService()
    {
        $this-&gt;services['debug.event_dispatcher'] = $instance = new \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher(new \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher($this), $this-&gt;get('debug.stopwatch'), $this-&gt;get('monolog.logger.event', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance-&gt;addListenerService('kernel.controller', array(0 =&gt; 'data_collector.router', 1 =&gt; 'onKernelController'), 0);
        $instance-&gt;addListenerService('kernel.request', array(0 =&gt; 'assetic.request_listener', 1 =&gt; 'onKernelRequest'), 0);
        $instance-&gt;addSubscriberService('response_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener');
        $instance-&gt;addSubscriberService('streamed_response_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener');
        $instance-&gt;addSubscriberService('locale_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener');
        $instance-&gt;addSubscriberService('translator_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\TranslatorListener');
        $instance-&gt;addSubscriberService('session_listener', 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SessionListener');
</codefragment>
  </duplication>
  <duplication lines="19" tokens="95">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="589"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="593"/>
    <codefragment>        $instance-&gt;addSubscriberService('session_listener', 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SessionListener');
        $instance-&gt;addSubscriberService('session.save_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener');
        $instance-&gt;addSubscriberService('fragment.listener', 'Symfony\\Component\\HttpKernel\\EventListener\\FragmentListener');
        $instance-&gt;addSubscriberService('profiler_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener');
        $instance-&gt;addSubscriberService('data_collector.request', 'Symfony\\Component\\HttpKernel\\DataCollector\\RequestDataCollector');
        $instance-&gt;addSubscriberService('router_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener');
        $instance-&gt;addSubscriberService('debug.debug_handlers_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener');
        $instance-&gt;addSubscriberService('security.firewall', 'Symfony\\Component\\Security\\Http\\Firewall');
        $instance-&gt;addSubscriberService('security.rememberme.response_listener', 'Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener');
        $instance-&gt;addSubscriberService('twig.exception_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener');
        $instance-&gt;addSubscriberService('monolog.handler.console', 'Symfony\\Bridge\\Monolog\\Handler\\ConsoleHandler');
        $instance-&gt;addSubscriberService('monolog.handler.console_very_verbose', 'Symfony\\Bridge\\Monolog\\Handler\\ConsoleHandler');
        $instance-&gt;addSubscriberService('swiftmailer.email_sender.listener', 'Symfony\\Bundle\\SwiftmailerBundle\\EventListener\\EmailSenderListener');
        $instance-&gt;addSubscriberService('sensio_framework_extra.controller.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener');
        $instance-&gt;addSubscriberService('sensio_framework_extra.converter.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener');
        $instance-&gt;addSubscriberService('sensio_framework_extra.view.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener');
        $instance-&gt;addSubscriberService('sensio_framework_extra.cache.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener');
        $instance-&gt;addSubscriberService('sensio_framework_extra.security.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\SecurityListener');
        $instance-&gt;addSubscriberService('debug.dump_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\DumpListener');
</codefragment>
  </duplication>
  <duplication lines="181" tokens="395">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="610"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="613"/>
    <codefragment>        return $instance;
    }

    /**
     * Gets the 'debug.stopwatch' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Stopwatch\Stopwatch A Symfony\Component\Stopwatch\Stopwatch instance.
     */
    protected function getDebug_StopwatchService()
    {
        return $this-&gt;services['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch();
    }

    /**
     * Gets the 'doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Registry A Doctrine\Bundle\DoctrineBundle\Registry instance.
     */
    protected function getDoctrineService()
    {
        return $this-&gt;services['doctrine'] = new \Doctrine\Bundle\DoctrineBundle\Registry($this, array('default' =&gt; 'doctrine.dbal.default_connection'), array('default' =&gt; 'doctrine.orm.default_entity_manager'), 'default', 'default');
    }

    /**
     * Gets the 'doctrine.dbal.connection_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ConnectionFactory A Doctrine\Bundle\DoctrineBundle\ConnectionFactory instance.
     */
    protected function getDoctrine_Dbal_ConnectionFactoryService()
    {
        return $this-&gt;services['doctrine.dbal.connection_factory'] = new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory(array());
    }

    /**
     * Gets the 'doctrine.dbal.default_connection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\DBAL\Connection A Doctrine\DBAL\Connection instance.
     */
    protected function getDoctrine_Dbal_DefaultConnectionService()
    {
        $a = new \Doctrine\DBAL\Logging\LoggerChain();
        $a-&gt;addLogger(new \Symfony\Bridge\Doctrine\Logger\DbalLogger($this-&gt;get('monolog.logger.doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this-&gt;get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $a-&gt;addLogger($this-&gt;get('doctrine.dbal.logger.profiling.default'));

        $b = new \Doctrine\DBAL\Configuration();
        $b-&gt;setSQLLogger($a);

        $c = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);
        $c-&gt;addEventListener(array(0 =&gt; 'loadClassMetadata'), $this-&gt;get('doctrine.orm.default_listeners.attach_entity_listeners'));

        return $this-&gt;services['doctrine.dbal.default_connection'] = $this-&gt;get('doctrine.dbal.connection_factory')-&gt;createConnection(array('driver' =&gt; 'pdo_mysql', 'host' =&gt; '127.0.0.1', 'port' =&gt; NULL, 'dbname' =&gt; 'learn', 'user' =&gt; 'root', 'password' =&gt; 'qwe123', 'charset' =&gt; 'UTF8', 'driverOptions' =&gt; array(), 'defaultTableOptions' =&gt; array()), $b, $c, array());
    }

    /**
     * Gets the 'doctrine.orm.default_entity_listener_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\ORM\Mapping\DefaultEntityListenerResolver A Doctrine\ORM\Mapping\DefaultEntityListenerResolver instance.
     */
    protected function getDoctrine_Orm_DefaultEntityListenerResolverService()
    {
        return $this-&gt;services['doctrine.orm.default_entity_listener_resolver'] = new \Doctrine\ORM\Mapping\DefaultEntityListenerResolver();
    }

    /**
     * Gets the 'doctrine.orm.default_entity_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\ORM\EntityManager A Doctrine\ORM\EntityManager instance.
     */
    protected function getDoctrine_Orm_DefaultEntityManagerService()
    {
        $a = new \Doctrine\ORM\Mapping\Driver\SimplifiedXmlDriver(array(($this-&gt;targetDirs[3].'/src/WordBundle/Resources/config/doctrine') =&gt; 'WordBundle\\Entity'));
        $a-&gt;setGlobalBasename('mapping');

        $b = new \Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain();
        $b-&gt;addDriver($a, 'WordBundle\\Entity');

        $c = new \Doctrine\ORM\Configuration();
        $c-&gt;setEntityNamespaces(array('WordBundle' =&gt; 'WordBundle\\Entity'));
        $c-&gt;setMetadataCacheImpl($this-&gt;get('doctrine_cache.providers.doctrine.orm.default_metadata_cache'));
        $c-&gt;setQueryCacheImpl($this-&gt;get('doctrine_cache.providers.doctrine.orm.default_query_cache'));
        $c-&gt;setResultCacheImpl($this-&gt;get('doctrine_cache.providers.doctrine.orm.default_result_cache'));
        $c-&gt;setMetadataDriverImpl($b);
        $c-&gt;setProxyDir((__DIR__.'/doctrine/orm/Proxies'));
        $c-&gt;setProxyNamespace('Proxies');
        $c-&gt;setAutoGenerateProxyClasses(true);
        $c-&gt;setClassMetadataFactoryName('Doctrine\\ORM\\Mapping\\ClassMetadataFactory');
        $c-&gt;setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $c-&gt;setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy());
        $c-&gt;setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
        $c-&gt;setEntityListenerResolver($this-&gt;get('doctrine.orm.default_entity_listener_resolver'));

        $this-&gt;services['doctrine.orm.default_entity_manager'] = $instance = \Doctrine\ORM\EntityManager::create($this-&gt;get('doctrine.dbal.default_connection'), $c);

        $this-&gt;get('doctrine.orm.default_manager_configurator')-&gt;configure($instance);

        return $instance;
    }

    /**
     * Gets the 'doctrine.orm.default_listeners.attach_entity_listeners' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\ORM\Tools\AttachEntityListenersListener A Doctrine\ORM\Tools\AttachEntityListenersListener instance.
     */
    protected function getDoctrine_Orm_DefaultListeners_AttachEntityListenersService()
    {
        return $this-&gt;services['doctrine.orm.default_listeners.attach_entity_listeners'] = new \Doctrine\ORM\Tools\AttachEntityListenersListener();
    }

    /**
     * Gets the 'doctrine.orm.default_manager_configurator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator A Doctrine\Bundle\DoctrineBundle\ManagerConfigurator instance.
     */
    protected function getDoctrine_Orm_DefaultManagerConfiguratorService()
    {
        return $this-&gt;services['doctrine.orm.default_manager_configurator'] = new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator(array(), array());
    }

    /**
     * Gets the 'doctrine.orm.validator.unique' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator A Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator instance.
     */
    protected function getDoctrine_Orm_Validator_UniqueService()
    {
        return $this-&gt;services['doctrine.orm.validator.unique'] = new \Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator($this-&gt;get('doctrine'));
    }

    /**
     * Gets the 'doctrine.orm.validator_initializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer A Symfony\Bridge\Doctrine\Validator\DoctrineInitializer instance.
     */
    protected function getDoctrine_Orm_ValidatorInitializerService()
    {
        return $this-&gt;services['doctrine.orm.validator_initializer'] = new \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer($this-&gt;get('doctrine'));
    }

    /**
     * Gets the 'doctrine_cache.providers.doctrine.orm.default_metadata_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache A Doctrine\Common\Cache\ArrayCache instance.
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_DefaultMetadataCacheService()
    {
        $this-&gt;services['doctrine_cache.providers.doctrine.orm.default_metadata_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance-&gt;setNamespace('sf2orm_default_ad6b7a80e8b928a193c8ffe28465ef0eb7a480d4f6099d6cda0ec7edba26e2e4');
</codefragment>
  </duplication>
  <duplication lines="828" tokens="1434">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="826"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="829"/>
    <codefragment>        return $instance;
    }

    /**
     * Gets the 'file_locator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Config\FileLocator A Symfony\Component\HttpKernel\Config\FileLocator instance.
     */
    protected function getFileLocatorService()
    {
        return $this-&gt;services['file_locator'] = new \Symfony\Component\HttpKernel\Config\FileLocator($this-&gt;get('kernel'), ($this-&gt;targetDirs[2].'/Resources'));
    }

    /**
     * Gets the 'filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Filesystem\Filesystem A Symfony\Component\Filesystem\Filesystem instance.
     */
    protected function getFilesystemService()
    {
        return $this-&gt;services['filesystem'] = new \Symfony\Component\Filesystem\Filesystem();
    }

    /**
     * Gets the 'form.csrf_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Csrf\CsrfProvider\CsrfTokenManagerAdapter A Symfony\Component\Form\Extension\Csrf\CsrfProvider\CsrfTokenManagerAdapter instance.
     *
     * @deprecated The "form.csrf_provider" service is deprecated since Symfony 2.4 and will be removed in 3.0. Use the "security.csrf.token_manager" service instead.
     */
    protected function getForm_CsrfProviderService()
    {
        @trigger_error('The "form.csrf_provider" service is deprecated since Symfony 2.4 and will be removed in 3.0. Use the "security.csrf.token_manager" service instead.', E_USER_DEPRECATED);

        return $this-&gt;services['form.csrf_provider'] = new \Symfony\Component\Form\Extension\Csrf\CsrfProvider\CsrfTokenManagerAdapter($this-&gt;get('security.csrf.token_manager'));
    }

    /**
     * Gets the 'form.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\FormFactory A Symfony\Component\Form\FormFactory instance.
     */
    protected function getForm_FactoryService()
    {
        return $this-&gt;services['form.factory'] = new \Symfony\Component\Form\FormFactory($this-&gt;get('form.registry'), $this-&gt;get('form.resolved_type_factory'));
    }

    /**
     * Gets the 'form.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\FormRegistry A Symfony\Component\Form\FormRegistry instance.
     */
    protected function getForm_RegistryService()
    {
        return $this-&gt;services['form.registry'] = new \Symfony\Component\Form\FormRegistry(array(0 =&gt; new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension($this, array('form' =&gt; 'form.type.form', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' =&gt; 'form.type.form', 'birthday' =&gt; 'form.type.birthday', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\BirthdayType' =&gt; 'form.type.birthday', 'checkbox' =&gt; 'form.type.checkbox', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\CheckboxType' =&gt; 'form.type.checkbox', 'choice' =&gt; 'form.type.choice', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' =&gt; 'form.type.choice', 'collection' =&gt; 'form.type.collection', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\CollectionType' =&gt; 'form.type.collection', 'country' =&gt; 'form.type.country', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\CountryType' =&gt; 'form.type.country', 'date' =&gt; 'form.type.date', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType' =&gt; 'form.type.date', 'datetime' =&gt; 'form.type.datetime', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\DateTimeType' =&gt; 'form.type.datetime', 'email' =&gt; 'form.type.email', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\EmailType' =&gt; 'form.type.email', 'file' =&gt; 'form.type.file', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType' =&gt; 'form.type.file', 'hidden' =&gt; 'form.type.hidden', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\HiddenType' =&gt; 'form.type.hidden', 'integer' =&gt; 'form.type.integer', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\IntegerType' =&gt; 'form.type.integer', 'language' =&gt; 'form.type.language', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\LanguageType' =&gt; 'form.type.language', 'locale' =&gt; 'form.type.locale', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\LocaleType' =&gt; 'form.type.locale', 'money' =&gt; 'form.type.money', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\MoneyType' =&gt; 'form.type.money', 'number' =&gt; 'form.type.number', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\NumberType' =&gt; 'form.type.number', 'password' =&gt; 'form.type.password', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\PasswordType' =&gt; 'form.type.password', 'percent' =&gt; 'form.type.percent', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\PercentType' =&gt; 'form.type.percent', 'radio' =&gt; 'form.type.radio', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RadioType' =&gt; 'form.type.radio', 'range' =&gt; 'form.type.range', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RangeType' =&gt; 'form.type.range', 'repeated' =&gt; 'form.type.repeated', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' =&gt; 'form.type.repeated', 'search' =&gt; 'form.type.search', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SearchType' =&gt; 'form.type.search', 'textarea' =&gt; 'form.type.textarea', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\TextareaType' =&gt; 'form.type.textarea', 'text' =&gt; 'form.type.text', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType' =&gt; 'form.type.text', 'time' =&gt; 'form.type.time', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\TimeType' =&gt; 'form.type.time', 'timezone' =&gt; 'form.type.timezone', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\TimezoneType' =&gt; 'form.type.timezone', 'url' =&gt; 'form.type.url', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\UrlType' =&gt; 'form.type.url', 'button' =&gt; 'form.type.button', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ButtonType' =&gt; 'form.type.button', 'submit' =&gt; 'form.type.submit', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' =&gt; 'form.type.submit', 'reset' =&gt; 'form.type.reset', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ResetType' =&gt; 'form.type.reset', 'currency' =&gt; 'form.type.currency', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\CurrencyType' =&gt; 'form.type.currency', 'entity' =&gt; 'form.type.entity', 'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' =&gt; 'form.type.entity'), array('Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' =&gt; array(0 =&gt; 'form.type_extension.form.http_foundation', 1 =&gt; 'form.type_extension.form.validator', 2 =&gt; 'form.type_extension.csrf', 3 =&gt; 'form.type_extension.form.data_collector'), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' =&gt; array(0 =&gt; 'form.type_extension.repeated.validator'), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' =&gt; array(0 =&gt; 'form.type_extension.submit.validator')), array(0 =&gt; 'form.type_guesser.validator', 1 =&gt; 'form.type_guesser.doctrine'))), $this-&gt;get('form.resolved_type_factory'));
    }

    /**
     * Gets the 'form.resolved_type_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy A Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy instance.
     */
    protected function getForm_ResolvedTypeFactoryService()
    {
        return $this-&gt;services['form.resolved_type_factory'] = new \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy(new \Symfony\Component\Form\ResolvedFormTypeFactory(), $this-&gt;get('data_collector.form'));
    }

    /**
     * Gets the 'form.type.birthday' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\BirthdayType A Symfony\Component\Form\Extension\Core\Type\BirthdayType instance.
     */
    protected function getForm_Type_BirthdayService()
    {
        return $this-&gt;services['form.type.birthday'] = new \Symfony\Component\Form\Extension\Core\Type\BirthdayType();
    }

    /**
     * Gets the 'form.type.button' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ButtonType A Symfony\Component\Form\Extension\Core\Type\ButtonType instance.
     */
    protected function getForm_Type_ButtonService()
    {
        return $this-&gt;services['form.type.button'] = new \Symfony\Component\Form\Extension\Core\Type\ButtonType();
    }

    /**
     * Gets the 'form.type.checkbox' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CheckboxType A Symfony\Component\Form\Extension\Core\Type\CheckboxType instance.
     */
    protected function getForm_Type_CheckboxService()
    {
        return $this-&gt;services['form.type.checkbox'] = new \Symfony\Component\Form\Extension\Core\Type\CheckboxType();
    }

    /**
     * Gets the 'form.type.choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ChoiceType A Symfony\Component\Form\Extension\Core\Type\ChoiceType instance.
     */
    protected function getForm_Type_ChoiceService()
    {
        return $this-&gt;services['form.type.choice'] = new \Symfony\Component\Form\Extension\Core\Type\ChoiceType();
    }

    /**
     * Gets the 'form.type.collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CollectionType A Symfony\Component\Form\Extension\Core\Type\CollectionType instance.
     */
    protected function getForm_Type_CollectionService()
    {
        return $this-&gt;services['form.type.collection'] = new \Symfony\Component\Form\Extension\Core\Type\CollectionType();
    }

    /**
     * Gets the 'form.type.country' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CountryType A Symfony\Component\Form\Extension\Core\Type\CountryType instance.
     */
    protected function getForm_Type_CountryService()
    {
        return $this-&gt;services['form.type.country'] = new \Symfony\Component\Form\Extension\Core\Type\CountryType();
    }

    /**
     * Gets the 'form.type.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CurrencyType A Symfony\Component\Form\Extension\Core\Type\CurrencyType instance.
     */
    protected function getForm_Type_CurrencyService()
    {
        return $this-&gt;services['form.type.currency'] = new \Symfony\Component\Form\Extension\Core\Type\CurrencyType();
    }

    /**
     * Gets the 'form.type.date' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\DateType A Symfony\Component\Form\Extension\Core\Type\DateType instance.
     */
    protected function getForm_Type_DateService()
    {
        return $this-&gt;services['form.type.date'] = new \Symfony\Component\Form\Extension\Core\Type\DateType();
    }

    /**
     * Gets the 'form.type.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\DateTimeType A Symfony\Component\Form\Extension\Core\Type\DateTimeType instance.
     */
    protected function getForm_Type_DatetimeService()
    {
        return $this-&gt;services['form.type.datetime'] = new \Symfony\Component\Form\Extension\Core\Type\DateTimeType();
    }

    /**
     * Gets the 'form.type.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\EmailType A Symfony\Component\Form\Extension\Core\Type\EmailType instance.
     */
    protected function getForm_Type_EmailService()
    {
        return $this-&gt;services['form.type.email'] = new \Symfony\Component\Form\Extension\Core\Type\EmailType();
    }

    /**
     * Gets the 'form.type.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Form\Type\EntityType A Symfony\Bridge\Doctrine\Form\Type\EntityType instance.
     */
    protected function getForm_Type_EntityService()
    {
        return $this-&gt;services['form.type.entity'] = new \Symfony\Bridge\Doctrine\Form\Type\EntityType($this-&gt;get('doctrine'));
    }

    /**
     * Gets the 'form.type.file' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\FileType A Symfony\Component\Form\Extension\Core\Type\FileType instance.
     */
    protected function getForm_Type_FileService()
    {
        return $this-&gt;services['form.type.file'] = new \Symfony\Component\Form\Extension\Core\Type\FileType();
    }

    /**
     * Gets the 'form.type.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\FormType A Symfony\Component\Form\Extension\Core\Type\FormType instance.
     */
    protected function getForm_Type_FormService()
    {
        return $this-&gt;services['form.type.form'] = new \Symfony\Component\Form\Extension\Core\Type\FormType($this-&gt;get('property_accessor'));
    }

    /**
     * Gets the 'form.type.hidden' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\HiddenType A Symfony\Component\Form\Extension\Core\Type\HiddenType instance.
     */
    protected function getForm_Type_HiddenService()
    {
        return $this-&gt;services['form.type.hidden'] = new \Symfony\Component\Form\Extension\Core\Type\HiddenType();
    }

    /**
     * Gets the 'form.type.integer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\IntegerType A Symfony\Component\Form\Extension\Core\Type\IntegerType instance.
     */
    protected function getForm_Type_IntegerService()
    {
        return $this-&gt;services['form.type.integer'] = new \Symfony\Component\Form\Extension\Core\Type\IntegerType();
    }

    /**
     * Gets the 'form.type.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\LanguageType A Symfony\Component\Form\Extension\Core\Type\LanguageType instance.
     */
    protected function getForm_Type_LanguageService()
    {
        return $this-&gt;services['form.type.language'] = new \Symfony\Component\Form\Extension\Core\Type\LanguageType();
    }

    /**
     * Gets the 'form.type.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\LocaleType A Symfony\Component\Form\Extension\Core\Type\LocaleType instance.
     */
    protected function getForm_Type_LocaleService()
    {
        return $this-&gt;services['form.type.locale'] = new \Symfony\Component\Form\Extension\Core\Type\LocaleType();
    }

    /**
     * Gets the 'form.type.money' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\MoneyType A Symfony\Component\Form\Extension\Core\Type\MoneyType instance.
     */
    protected function getForm_Type_MoneyService()
    {
        return $this-&gt;services['form.type.money'] = new \Symfony\Component\Form\Extension\Core\Type\MoneyType();
    }

    /**
     * Gets the 'form.type.number' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\NumberType A Symfony\Component\Form\Extension\Core\Type\NumberType instance.
     */
    protected function getForm_Type_NumberService()
    {
        return $this-&gt;services['form.type.number'] = new \Symfony\Component\Form\Extension\Core\Type\NumberType();
    }

    /**
     * Gets the 'form.type.password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\PasswordType A Symfony\Component\Form\Extension\Core\Type\PasswordType instance.
     */
    protected function getForm_Type_PasswordService()
    {
        return $this-&gt;services['form.type.password'] = new \Symfony\Component\Form\Extension\Core\Type\PasswordType();
    }

    /**
     * Gets the 'form.type.percent' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\PercentType A Symfony\Component\Form\Extension\Core\Type\PercentType instance.
     */
    protected function getForm_Type_PercentService()
    {
        return $this-&gt;services['form.type.percent'] = new \Symfony\Component\Form\Extension\Core\Type\PercentType();
    }

    /**
     * Gets the 'form.type.radio' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RadioType A Symfony\Component\Form\Extension\Core\Type\RadioType instance.
     */
    protected function getForm_Type_RadioService()
    {
        return $this-&gt;services['form.type.radio'] = new \Symfony\Component\Form\Extension\Core\Type\RadioType();
    }

    /**
     * Gets the 'form.type.range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RangeType A Symfony\Component\Form\Extension\Core\Type\RangeType instance.
     */
    protected function getForm_Type_RangeService()
    {
        return $this-&gt;services['form.type.range'] = new \Symfony\Component\Form\Extension\Core\Type\RangeType();
    }

    /**
     * Gets the 'form.type.repeated' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RepeatedType A Symfony\Component\Form\Extension\Core\Type\RepeatedType instance.
     */
    protected function getForm_Type_RepeatedService()
    {
        return $this-&gt;services['form.type.repeated'] = new \Symfony\Component\Form\Extension\Core\Type\RepeatedType();
    }

    /**
     * Gets the 'form.type.reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ResetType A Symfony\Component\Form\Extension\Core\Type\ResetType instance.
     */
    protected function getForm_Type_ResetService()
    {
        return $this-&gt;services['form.type.reset'] = new \Symfony\Component\Form\Extension\Core\Type\ResetType();
    }

    /**
     * Gets the 'form.type.search' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\SearchType A Symfony\Component\Form\Extension\Core\Type\SearchType instance.
     */
    protected function getForm_Type_SearchService()
    {
        return $this-&gt;services['form.type.search'] = new \Symfony\Component\Form\Extension\Core\Type\SearchType();
    }

    /**
     * Gets the 'form.type.submit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\SubmitType A Symfony\Component\Form\Extension\Core\Type\SubmitType instance.
     */
    protected function getForm_Type_SubmitService()
    {
        return $this-&gt;services['form.type.submit'] = new \Symfony\Component\Form\Extension\Core\Type\SubmitType();
    }

    /**
     * Gets the 'form.type.text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TextType A Symfony\Component\Form\Extension\Core\Type\TextType instance.
     */
    protected function getForm_Type_TextService()
    {
        return $this-&gt;services['form.type.text'] = new \Symfony\Component\Form\Extension\Core\Type\TextType();
    }

    /**
     * Gets the 'form.type.textarea' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TextareaType A Symfony\Component\Form\Extension\Core\Type\TextareaType instance.
     */
    protected function getForm_Type_TextareaService()
    {
        return $this-&gt;services['form.type.textarea'] = new \Symfony\Component\Form\Extension\Core\Type\TextareaType();
    }

    /**
     * Gets the 'form.type.time' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TimeType A Symfony\Component\Form\Extension\Core\Type\TimeType instance.
     */
    protected function getForm_Type_TimeService()
    {
        return $this-&gt;services['form.type.time'] = new \Symfony\Component\Form\Extension\Core\Type\TimeType();
    }

    /**
     * Gets the 'form.type.timezone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TimezoneType A Symfony\Component\Form\Extension\Core\Type\TimezoneType instance.
     */
    protected function getForm_Type_TimezoneService()
    {
        return $this-&gt;services['form.type.timezone'] = new \Symfony\Component\Form\Extension\Core\Type\TimezoneType();
    }

    /**
     * Gets the 'form.type.url' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\UrlType A Symfony\Component\Form\Extension\Core\Type\UrlType instance.
     */
    protected function getForm_Type_UrlService()
    {
        return $this-&gt;services['form.type.url'] = new \Symfony\Component\Form\Extension\Core\Type\UrlType();
    }

    /**
     * Gets the 'form.type_extension.csrf' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension A Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension instance.
     */
    protected function getForm_TypeExtension_CsrfService()
    {
        return $this-&gt;services['form.type_extension.csrf'] = new \Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension($this-&gt;get('security.csrf.token_manager'), true, '_token', $this-&gt;get('translator.default'), 'validators');
    }

    /**
     * Gets the 'form.type_extension.form.data_collector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension A Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension instance.
     */
    protected function getForm_TypeExtension_Form_DataCollectorService()
    {
        return $this-&gt;services['form.type_extension.form.data_collector'] = new \Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension($this-&gt;get('data_collector.form'));
    }

    /**
     * Gets the 'form.type_extension.form.http_foundation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension A Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension instance.
     */
    protected function getForm_TypeExtension_Form_HttpFoundationService()
    {
        return $this-&gt;services['form.type_extension.form.http_foundation'] = new \Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension(new \Symfony\Component\Form\Extension\HttpFoundation\HttpFoundationRequestHandler(new \Symfony\Component\Form\Util\ServerParams($this-&gt;get('request_stack'))));
    }

    /**
     * Gets the 'form.type_extension.form.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension instance.
     */
    protected function getForm_TypeExtension_Form_ValidatorService()
    {
        return $this-&gt;services['form.type_extension.form.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension($this-&gt;get('validator'));
    }

    /**
     * Gets the 'form.type_extension.repeated.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension instance.
     */
    protected function getForm_TypeExtension_Repeated_ValidatorService()
    {
        return $this-&gt;services['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension();
    }

    /**
     * Gets the 'form.type_extension.submit.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension instance.
     */
    protected function getForm_TypeExtension_Submit_ValidatorService()
    {
        return $this-&gt;services['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension();
    }

    /**
     * Gets the 'form.type_guesser.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser A Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser instance.
     */
    protected function getForm_TypeGuesser_DoctrineService()
    {
        return $this-&gt;services['form.type_guesser.doctrine'] = new \Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser($this-&gt;get('doctrine'));
    }

    /**
     * Gets the 'form.type_guesser.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser A Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser instance.
     */
    protected function getForm_TypeGuesser_ValidatorService()
    {
        return $this-&gt;services['form.type_guesser.validator'] = new \Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser($this-&gt;get('validator'));
    }

    /**
     * Gets the 'fragment.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler A Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler instance.
     */
    protected function getFragment_HandlerService()
    {
        $this-&gt;services['fragment.handler'] = $instance = new \Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler($this, $this-&gt;get('request_stack'), true);

        $instance-&gt;addRendererService('inline', 'fragment.renderer.inline');
        $instance-&gt;addRendererService('hinclude', 'fragment.renderer.hinclude');
        $instance-&gt;addRendererService('hinclude', 'fragment.renderer.hinclude');
        $instance-&gt;addRendererService('esi', 'fragment.renderer.esi');
        $instance-&gt;addRendererService('ssi', 'fragment.renderer.ssi');

        return $instance;
    }

    /**
     * Gets the 'fragment.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\FragmentListener A Symfony\Component\HttpKernel\EventListener\FragmentListener instance.
     */
    protected function getFragment_ListenerService()
    {
        return $this-&gt;services['fragment.listener'] = new \Symfony\Component\HttpKernel\EventListener\FragmentListener($this-&gt;get('uri_signer'), '/_fragment');
    }

    /**
     * Gets the 'fragment.renderer.esi' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer A Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer instance.
     */
    protected function getFragment_Renderer_EsiService()
    {
        $this-&gt;services['fragment.renderer.esi'] = $instance = new \Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer(NULL, $this-&gt;get('fragment.renderer.inline'), $this-&gt;get('uri_signer'));

        $instance-&gt;setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the 'fragment.renderer.hinclude' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer A Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer instance.
     */
    protected function getFragment_Renderer_HincludeService()
    {
        $this-&gt;services['fragment.renderer.hinclude'] = $instance = new \Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer($this-&gt;get('twig'), $this-&gt;get('uri_signer'), NULL);

        $instance-&gt;setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the 'fragment.renderer.inline' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer A Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer instance.
     */
    protected function getFragment_Renderer_InlineService()
    {
        $this-&gt;services['fragment.renderer.inline'] = $instance = new \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer($this-&gt;get('http_kernel'), $this-&gt;get('debug.event_dispatcher'));

        $instance-&gt;setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the 'fragment.renderer.ssi' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\SsiFragmentRenderer A Symfony\Component\HttpKernel\Fragment\SsiFragmentRenderer instance.
     */
    protected function getFragment_Renderer_SsiService()
    {
        $this-&gt;services['fragment.renderer.ssi'] = $instance = new \Symfony\Component\HttpKernel\Fragment\SsiFragmentRenderer(NULL, $this-&gt;get('fragment.renderer.inline'), $this-&gt;get('uri_signer'));

        $instance-&gt;setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the 'http_kernel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel A Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel instance.
     */
    protected function getHttpKernelService()
    {
        return $this-&gt;services['http_kernel'] = new \Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel($this-&gt;get('debug.event_dispatcher'), $this, $this-&gt;get('debug.controller_resolver'), $this-&gt;get('request_stack'), false);
    }

    /**
     * Gets the 'kernel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     */
    protected function getKernelService()
    {
        throw new RuntimeException('You have requested a synthetic service ("kernel"). The DIC does not know how to construct this service.');
    }

    /**
     * Gets the 'kernel.class_cache.cache_warmer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\CacheWarmer\ClassCacheCacheWarmer A Symfony\Bundle\FrameworkBundle\CacheWarmer\ClassCacheCacheWarmer instance.
     */
    protected function getKernel_ClassCache_CacheWarmerService()
    {
        return $this-&gt;services['kernel.class_cache.cache_warmer'] = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\ClassCacheCacheWarmer();
    }

    /**
     * Gets the 'locale_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleListener A Symfony\Component\HttpKernel\EventListener\LocaleListener instance.
     */
    protected function getLocaleListenerService()
    {
        return $this-&gt;services['locale_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleListener($this-&gt;get('request_stack'), 'ru', $this-&gt;get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'logger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getLoggerService()
    {
        $this-&gt;services['logger'] = $instance = new \Symfony\Bridge\Monolog\Logger('app');

        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.console'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.main'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.handler.console' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\ConsoleHandler A Symfony\Bridge\Monolog\Handler\ConsoleHandler instance.
     */
    protected function getMonolog_Handler_ConsoleService()
    {
        return $this-&gt;services['monolog.handler.console'] = new \Symfony\Bridge\Monolog\Handler\ConsoleHandler(NULL, false, array(64 =&gt; 200, 128 =&gt; 100, 32 =&gt; 300, 256 =&gt; 100));
    }

    /**
     * Gets the 'monolog.handler.console_very_verbose' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\ConsoleHandler A Symfony\Bridge\Monolog\Handler\ConsoleHandler instance.
     */
    protected function getMonolog_Handler_ConsoleVeryVerboseService()
    {
        return $this-&gt;services['monolog.handler.console_very_verbose'] = new \Symfony\Bridge\Monolog\Handler\ConsoleHandler(NULL, false, array(64 =&gt; 250, 128 =&gt; 250, 256 =&gt; 100, 32 =&gt; 300));
    }

    /**
     * Gets the 'monolog.handler.debug' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\DebugHandler A Symfony\Bridge\Monolog\Handler\DebugHandler instance.
     */
    protected function getMonolog_Handler_DebugService()
    {
        return $this-&gt;services['monolog.handler.debug'] = new \Symfony\Bridge\Monolog\Handler\DebugHandler(100, true);
    }

    /**
     * Gets the 'monolog.handler.main' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Monolog\Handler\StreamHandler A Monolog\Handler\StreamHandler instance.
     */
    protected function getMonolog_Handler_MainService()
    {
        return $this-&gt;services['monolog.handler.main'] = new \Monolog\Handler\StreamHandler(($this-&gt;targetDirs[2].'/logs/dev.log'), 100, true, NULL);
</codefragment>
  </duplication>
  <duplication lines="217" tokens="453">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="1653"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="1656"/>
    <codefragment>        return $this-&gt;services['monolog.handler.main'] = new \Monolog\Handler\StreamHandler(($this-&gt;targetDirs[2].'/logs/dev.log'), 100, true, NULL);
    }

    /**
     * Gets the 'monolog.logger.assetic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_AsseticService()
    {
        $this-&gt;services['monolog.logger.assetic'] = $instance = new \Symfony\Bridge\Monolog\Logger('assetic');

        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.console'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.main'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_DoctrineService()
    {
        $this-&gt;services['monolog.logger.doctrine'] = $instance = new \Symfony\Bridge\Monolog\Logger('doctrine');

        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.console_very_verbose'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.main'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.event' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_EventService()
    {
        $this-&gt;services['monolog.logger.event'] = $instance = new \Symfony\Bridge\Monolog\Logger('event');

        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.console'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.main'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_PhpService()
    {
        $this-&gt;services['monolog.logger.php'] = $instance = new \Symfony\Bridge\Monolog\Logger('php');

        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.console'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.main'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_ProfilerService()
    {
        $this-&gt;services['monolog.logger.profiler'] = $instance = new \Symfony\Bridge\Monolog\Logger('profiler');

        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.console'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.main'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_RequestService()
    {
        $this-&gt;services['monolog.logger.request'] = $instance = new \Symfony\Bridge\Monolog\Logger('request');

        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.console'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.main'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_RouterService()
    {
        $this-&gt;services['monolog.logger.router'] = $instance = new \Symfony\Bridge\Monolog\Logger('router');

        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.console'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.main'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_SecurityService()
    {
        $this-&gt;services['monolog.logger.security'] = $instance = new \Symfony\Bridge\Monolog\Logger('security');

        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.console'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.main'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.templating' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_TemplatingService()
    {
        $this-&gt;services['monolog.logger.templating'] = $instance = new \Symfony\Bridge\Monolog\Logger('templating');

        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.console'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.main'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_TranslationService()
    {
        $this-&gt;services['monolog.logger.translation'] = $instance = new \Symfony\Bridge\Monolog\Logger('translation');

        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.console'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.main'));
        $instance-&gt;pushHandler($this-&gt;get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Profiler\Profiler A Symfony\Component\HttpKernel\Profiler\Profiler instance.
     */
    protected function getProfilerService()
    {
        $a = $this-&gt;get('monolog.logger.profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $b = $this-&gt;get('kernel', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        $c = new \Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector($this-&gt;get('doctrine'));
        $c-&gt;addLogger('default', $this-&gt;get('doctrine.dbal.logger.profiling.default'));

        $d = new \Symfony\Component\HttpKernel\DataCollector\ConfigDataCollector();
        if ($this-&gt;has('kernel')) {
            $d-&gt;setKernel($b);
        }

        $this-&gt;services['profiler'] = $instance = new \Symfony\Component\HttpKernel\Profiler\Profiler(new \Symfony\Component\HttpKernel\Profiler\FileProfilerStorage(('file:'.__DIR__.'/profiler'), '', '', 86400), $a);

        $instance-&gt;add($this-&gt;get('data_collector.request'));
</codefragment>
  </duplication>
  <duplication lines="102" tokens="283">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="1869"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="1873"/>
    <codefragment>        $instance-&gt;add($this-&gt;get('data_collector.request'));
        $instance-&gt;add(new \Symfony\Component\HttpKernel\DataCollector\TimeDataCollector($b, $this-&gt;get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $instance-&gt;add(new \Symfony\Component\HttpKernel\DataCollector\MemoryDataCollector());
        $instance-&gt;add(new \Symfony\Component\HttpKernel\DataCollector\AjaxDataCollector());
        $instance-&gt;add($this-&gt;get('data_collector.form'));
        $instance-&gt;add(new \Symfony\Component\HttpKernel\DataCollector\ExceptionDataCollector());
        $instance-&gt;add(new \Symfony\Component\HttpKernel\DataCollector\LoggerDataCollector($a));
        $instance-&gt;add(new \Symfony\Component\HttpKernel\DataCollector\EventDataCollector($this-&gt;get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $instance-&gt;add($this-&gt;get('data_collector.router'));
        $instance-&gt;add($this-&gt;get('data_collector.translation'));
        $instance-&gt;add(new \Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector($this-&gt;get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this-&gt;get('security.role_hierarchy'), $this-&gt;get('security.logout_url_generator')));
        $instance-&gt;add(new \Symfony\Bridge\Twig\DataCollector\TwigDataCollector($this-&gt;get('twig.profile')));
        $instance-&gt;add($c);
        $instance-&gt;add(new \Symfony\Bundle\SwiftmailerBundle\DataCollector\MessageDataCollector($this));
        $instance-&gt;add($this-&gt;get('data_collector.dump'));
        $instance-&gt;add($d);

        return $instance;
    }

    /**
     * Gets the 'profiler_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ProfilerListener A Symfony\Component\HttpKernel\EventListener\ProfilerListener instance.
     */
    protected function getProfilerListenerService()
    {
        return $this-&gt;services['profiler_listener'] = new \Symfony\Component\HttpKernel\EventListener\ProfilerListener($this-&gt;get('profiler'), $this-&gt;get('request_stack'), NULL, false, false);
    }

    /**
     * Gets the 'property_accessor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\PropertyAccess\PropertyAccessor A Symfony\Component\PropertyAccess\PropertyAccessor instance.
     */
    protected function getPropertyAccessorService()
    {
        return $this-&gt;services['property_accessor'] = new \Symfony\Component\PropertyAccess\PropertyAccessor(false, false);
    }

    /**
     * Gets the 'request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     * @throws InactiveScopeException when the 'request' service is requested while the 'request' scope is not active
     * @deprecated The "request" service is deprecated since Symfony 2.7 and will be removed in 3.0. Use the "request_stack" service instead.
     */
    protected function getRequestService()
    {
        if (!isset($this-&gt;scopedServices['request'])) {
            throw new InactiveScopeException('request', 'request');
        }

        throw new RuntimeException('You have requested a synthetic service ("request"). The DIC does not know how to construct this service.');
    }

    /**
     * Gets the 'request_stack' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestStack A Symfony\Component\HttpFoundation\RequestStack instance.
     */
    protected function getRequestStackService()
    {
        return $this-&gt;services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack();
    }

    /**
     * Gets the 'response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ResponseListener A Symfony\Component\HttpKernel\EventListener\ResponseListener instance.
     */
    protected function getResponseListenerService()
    {
        return $this-&gt;services['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8');
    }

    /**
     * Gets the 'router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\Router A Symfony\Bundle\FrameworkBundle\Routing\Router instance.
     */
    protected function getRouterService()
    {
        $this-&gt;services['router'] = $instance = new \Symfony\Bundle\FrameworkBundle\Routing\Router($this, (__DIR__.'/assetic/routing.yml'), array('cache_dir' =&gt; __DIR__, 'debug' =&gt; true, 'generator_class' =&gt; 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_base_class' =&gt; 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_dumper_class' =&gt; 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper', 'generator_cache_class' =&gt; 'appDevUrlGenerator', 'matcher_class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_base_class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_dumper_class' =&gt; 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper', 'matcher_cache_class' =&gt; 'appDevUrlMatcher', 'strict_requirements' =&gt; true, 'resource_type' =&gt; 'yaml'), $this-&gt;get('router.request_context', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this-&gt;get('monolog.logger.router', ContainerInterface::NULL_ON_INVALID_REFERENCE));
</codefragment>
  </duplication>
  <duplication lines="175" tokens="505">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="1970"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="1974"/>
    <codefragment>        $this-&gt;services['router'] = $instance = new \Symfony\Bundle\FrameworkBundle\Routing\Router($this, (__DIR__.'/assetic/routing.yml'), array('cache_dir' =&gt; __DIR__, 'debug' =&gt; true, 'generator_class' =&gt; 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_base_class' =&gt; 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_dumper_class' =&gt; 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper', 'generator_cache_class' =&gt; 'appDevUrlGenerator', 'matcher_class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_base_class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_dumper_class' =&gt; 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper', 'matcher_cache_class' =&gt; 'appDevUrlMatcher', 'strict_requirements' =&gt; true, 'resource_type' =&gt; 'yaml'), $this-&gt;get('router.request_context', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this-&gt;get('monolog.logger.router', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance-&gt;setConfigCacheFactory($this-&gt;get('config_cache_factory'));

        return $instance;
    }

    /**
     * Gets the 'router_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\RouterListener A Symfony\Component\HttpKernel\EventListener\RouterListener instance.
     */
    protected function getRouterListenerService()
    {
        return $this-&gt;services['router_listener'] = new \Symfony\Component\HttpKernel\EventListener\RouterListener($this-&gt;get('router'), $this-&gt;get('request_stack'), $this-&gt;get('router.request_context', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this-&gt;get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'routing.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader A Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader instance.
     */
    protected function getRouting_LoaderService()
    {
        $a = $this-&gt;get('file_locator');
        $b = $this-&gt;get('annotation_reader');

        $c = new \Sensio\Bundle\FrameworkExtraBundle\Routing\AnnotatedRouteControllerLoader($b);

        $d = new \Symfony\Component\Config\Loader\LoaderResolver();
        $d-&gt;addLoader(new \Symfony\Component\Routing\Loader\XmlFileLoader($a));
        $d-&gt;addLoader(new \Symfony\Component\Routing\Loader\YamlFileLoader($a));
        $d-&gt;addLoader(new \Symfony\Component\Routing\Loader\PhpFileLoader($a));
        $d-&gt;addLoader(new \Symfony\Component\Routing\Loader\DirectoryLoader($a));
        $d-&gt;addLoader(new \Symfony\Component\Routing\Loader\DependencyInjection\ServiceRouterLoader($this));
        $d-&gt;addLoader(new \Symfony\Component\Routing\Loader\AnnotationDirectoryLoader($a, $c));
        $d-&gt;addLoader(new \Symfony\Component\Routing\Loader\AnnotationFileLoader($a, $c));
        $d-&gt;addLoader($c);
        $d-&gt;addLoader(new \Symfony\Bundle\AsseticBundle\Routing\AsseticLoader($this-&gt;get('assetic.asset_manager'), array()));

        return $this-&gt;services['routing.loader'] = new \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader($this-&gt;get('controller_name_converter'), $d);
    }

    /**
     * Gets the 'security.authentication.guard_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Guard\GuardAuthenticatorHandler A Symfony\Component\Security\Guard\GuardAuthenticatorHandler instance.
     */
    protected function getSecurity_Authentication_GuardHandlerService()
    {
        return $this-&gt;services['security.authentication.guard_handler'] = new \Symfony\Component\Security\Guard\GuardAuthenticatorHandler($this-&gt;get('security.token_storage'), $this-&gt;get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'security.authentication_utils' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Http\Authentication\AuthenticationUtils A Symfony\Component\Security\Http\Authentication\AuthenticationUtils instance.
     */
    protected function getSecurity_AuthenticationUtilsService()
    {
        return $this-&gt;services['security.authentication_utils'] = new \Symfony\Component\Security\Http\Authentication\AuthenticationUtils($this-&gt;get('request_stack'));
    }

    /**
     * Gets the 'security.authorization_checker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AuthorizationChecker A Symfony\Component\Security\Core\Authorization\AuthorizationChecker instance.
     */
    protected function getSecurity_AuthorizationCheckerService()
    {
        return $this-&gt;services['security.authorization_checker'] = new \Symfony\Component\Security\Core\Authorization\AuthorizationChecker($this-&gt;get('security.token_storage'), $this-&gt;get('security.authentication.manager'), $this-&gt;get('security.access.decision_manager'), false);
    }

    /**
     * Gets the 'security.context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\SecurityContext A Symfony\Component\Security\Core\SecurityContext instance.
     *
     * @deprecated The "security.context" service is deprecated since Symfony 2.6 and will be removed in 3.0.
     */
    protected function getSecurity_ContextService()
    {
        @trigger_error('The "security.context" service is deprecated since Symfony 2.6 and will be removed in 3.0.', E_USER_DEPRECATED);

        return $this-&gt;services['security.context'] = new \Symfony\Component\Security\Core\SecurityContext($this-&gt;get('security.token_storage'), $this-&gt;get('security.authorization_checker'));
    }

    /**
     * Gets the 'security.csrf.token_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Csrf\CsrfTokenManager A Symfony\Component\Security\Csrf\CsrfTokenManager instance.
     */
    protected function getSecurity_Csrf_TokenManagerService()
    {
        return $this-&gt;services['security.csrf.token_manager'] = new \Symfony\Component\Security\Csrf\CsrfTokenManager(new \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator(), new \Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage($this-&gt;get('session')));
    }

    /**
     * Gets the 'security.encoder_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\EncoderFactory A Symfony\Component\Security\Core\Encoder\EncoderFactory instance.
     */
    protected function getSecurity_EncoderFactoryService()
    {
        return $this-&gt;services['security.encoder_factory'] = new \Symfony\Component\Security\Core\Encoder\EncoderFactory(array());
    }

    /**
     * Gets the 'security.firewall' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Http\Firewall A Symfony\Component\Security\Http\Firewall instance.
     */
    protected function getSecurity_FirewallService()
    {
        return $this-&gt;services['security.firewall'] = new \Symfony\Component\Security\Http\Firewall(new \Symfony\Bundle\SecurityBundle\Security\FirewallMap($this, array('security.firewall.map.context.dev' =&gt; new \Symfony\Component\HttpFoundation\RequestMatcher('^/(_(profiler|wdt)|css|images|js)/'), 'security.firewall.map.context.main' =&gt; NULL)), $this-&gt;get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'security.firewall.map.context.dev' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_DevService()
    {
        return $this-&gt;services['security.firewall.map.context.dev'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(), NULL);
    }

    /**
     * Gets the 'security.firewall.map.context.main' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_MainService()
    {
        $a = $this-&gt;get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $b = $this-&gt;get('security.token_storage');
        $c = $this-&gt;get('security.authentication.manager');
        $d = $this-&gt;get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        $e = new \Symfony\Component\Security\Http\AccessMap();

        return $this-&gt;services['security.firewall.map.context.main'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 =&gt; new \Symfony\Component\Security\Http\Firewall\ChannelListener($e, new \Symfony\Component\Security\Http\EntryPoint\RetryAuthenticationEntryPoint(80, 443), $a), 1 =&gt; new \Symfony\Component\Security\Http\Firewall\ContextListener($b, array(0 =&gt; new \Symfony\Component\Security\Core\User\InMemoryUserProvider()), 'main', $a, $this-&gt;get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)), 2 =&gt; new \Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener($b, '5682a498e26fd7.32909122', $a, $c), 3 =&gt; new \Symfony\Component\Security\Http\Firewall\AccessListener($b, $this-&gt;get('security.access.decision_manager'), $e, $c)), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($b, $this-&gt;get('security.authentication.trust_resolver'), new \Symfony\Component\Security\Http\HttpUtils($d, $d), 'main', NULL, NULL, NULL, $a, false));
</codefragment>
  </duplication>
  <duplication lines="257" tokens="419">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="2144"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="2148"/>
    <codefragment>        return $this-&gt;services['security.firewall.map.context.main'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 =&gt; new \Symfony\Component\Security\Http\Firewall\ChannelListener($e, new \Symfony\Component\Security\Http\EntryPoint\RetryAuthenticationEntryPoint(80, 443), $a), 1 =&gt; new \Symfony\Component\Security\Http\Firewall\ContextListener($b, array(0 =&gt; new \Symfony\Component\Security\Core\User\InMemoryUserProvider()), 'main', $a, $this-&gt;get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)), 2 =&gt; new \Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener($b, '5682a498e26fd7.32909122', $a, $c), 3 =&gt; new \Symfony\Component\Security\Http\Firewall\AccessListener($b, $this-&gt;get('security.access.decision_manager'), $e, $c)), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($b, $this-&gt;get('security.authentication.trust_resolver'), new \Symfony\Component\Security\Http\HttpUtils($d, $d), 'main', NULL, NULL, NULL, $a, false));
    }

    /**
     * Gets the 'security.password_encoder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\UserPasswordEncoder A Symfony\Component\Security\Core\Encoder\UserPasswordEncoder instance.
     */
    protected function getSecurity_PasswordEncoderService()
    {
        return $this-&gt;services['security.password_encoder'] = new \Symfony\Component\Security\Core\Encoder\UserPasswordEncoder($this-&gt;get('security.encoder_factory'));
    }

    /**
     * Gets the 'security.rememberme.response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Http\RememberMe\ResponseListener A Symfony\Component\Security\Http\RememberMe\ResponseListener instance.
     */
    protected function getSecurity_Rememberme_ResponseListenerService()
    {
        return $this-&gt;services['security.rememberme.response_listener'] = new \Symfony\Component\Security\Http\RememberMe\ResponseListener();
    }

    /**
     * Gets the 'security.secure_random' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Util\SecureRandom A Symfony\Component\Security\Core\Util\SecureRandom instance.
     *
     * @deprecated The "security.secure_random" service is deprecated since Symfony 2.8 and will be removed in 3.0. Use the random_bytes() function instead.
     */
    protected function getSecurity_SecureRandomService()
    {
        @trigger_error('The "security.secure_random" service is deprecated since Symfony 2.8 and will be removed in 3.0. Use the random_bytes() function instead.', E_USER_DEPRECATED);

        return $this-&gt;services['security.secure_random'] = new \Symfony\Component\Security\Core\Util\SecureRandom((__DIR__.'/secure_random.seed'), $this-&gt;get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'security.token_storage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage A Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage instance.
     */
    protected function getSecurity_TokenStorageService()
    {
        return $this-&gt;services['security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage();
    }

    /**
     * Gets the 'security.user_checker.main' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\User\UserChecker A Symfony\Component\Security\Core\User\UserChecker instance.
     */
    protected function getSecurity_UserChecker_MainService()
    {
        return $this-&gt;services['security.user_checker.main'] = new \Symfony\Component\Security\Core\User\UserChecker();
    }

    /**
     * Gets the 'security.validator.user_password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator A Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator instance.
     */
    protected function getSecurity_Validator_UserPasswordService()
    {
        return $this-&gt;services['security.validator.user_password'] = new \Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator($this-&gt;get('security.token_storage'), $this-&gt;get('security.encoder_factory'));
    }

    /**
     * Gets the 'sensio_distribution.security_checker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \SensioLabs\Security\SecurityChecker A SensioLabs\Security\SecurityChecker instance.
     */
    protected function getSensioDistribution_SecurityCheckerService()
    {
        return $this-&gt;services['sensio_distribution.security_checker'] = new \SensioLabs\Security\SecurityChecker();
    }

    /**
     * Gets the 'sensio_distribution.security_checker.command' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \SensioLabs\Security\Command\SecurityCheckerCommand A SensioLabs\Security\Command\SecurityCheckerCommand instance.
     */
    protected function getSensioDistribution_SecurityChecker_CommandService()
    {
        return $this-&gt;services['sensio_distribution.security_checker.command'] = new \SensioLabs\Security\Command\SecurityCheckerCommand($this-&gt;get('sensio_distribution.security_checker'));
    }

    /**
     * Gets the 'sensio_framework_extra.cache.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener instance.
     */
    protected function getSensioFrameworkExtra_Cache_ListenerService()
    {
        return $this-&gt;services['sensio_framework_extra.cache.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener();
    }

    /**
     * Gets the 'sensio_framework_extra.controller.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener instance.
     */
    protected function getSensioFrameworkExtra_Controller_ListenerService()
    {
        return $this-&gt;services['sensio_framework_extra.controller.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener($this-&gt;get('annotation_reader'));
    }

    /**
     * Gets the 'sensio_framework_extra.converter.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter A Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter instance.
     */
    protected function getSensioFrameworkExtra_Converter_DatetimeService()
    {
        return $this-&gt;services['sensio_framework_extra.converter.datetime'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter();
    }

    /**
     * Gets the 'sensio_framework_extra.converter.doctrine.orm' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter A Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter instance.
     */
    protected function getSensioFrameworkExtra_Converter_Doctrine_OrmService()
    {
        return $this-&gt;services['sensio_framework_extra.converter.doctrine.orm'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter($this-&gt;get('doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'sensio_framework_extra.converter.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener instance.
     */
    protected function getSensioFrameworkExtra_Converter_ListenerService()
    {
        return $this-&gt;services['sensio_framework_extra.converter.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener($this-&gt;get('sensio_framework_extra.converter.manager'), true);
    }

    /**
     * Gets the 'sensio_framework_extra.converter.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager A Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager instance.
     */
    protected function getSensioFrameworkExtra_Converter_ManagerService()
    {
        $this-&gt;services['sensio_framework_extra.converter.manager'] = $instance = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager();

        $instance-&gt;add($this-&gt;get('sensio_framework_extra.converter.doctrine.orm'), 0, 'doctrine.orm');
        $instance-&gt;add($this-&gt;get('sensio_framework_extra.converter.datetime'), 0, 'datetime');

        return $instance;
    }

    /**
     * Gets the 'sensio_framework_extra.security.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener instance.
     */
    protected function getSensioFrameworkExtra_Security_ListenerService()
    {
        return $this-&gt;services['sensio_framework_extra.security.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener(NULL, new \Sensio\Bundle\FrameworkExtraBundle\Security\ExpressionLanguage(), $this-&gt;get('security.authentication.trust_resolver', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this-&gt;get('security.role_hierarchy', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this-&gt;get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this-&gt;get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'sensio_framework_extra.view.guesser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser A Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser instance.
     */
    protected function getSensioFrameworkExtra_View_GuesserService()
    {
        return $this-&gt;services['sensio_framework_extra.view.guesser'] = new \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser($this-&gt;get('kernel'));
    }

    /**
     * Gets the 'sensio_framework_extra.view.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener instance.
     */
    protected function getSensioFrameworkExtra_View_ListenerService()
    {
        return $this-&gt;services['sensio_framework_extra.view.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener($this);
    }

    /**
     * Gets the 'service_container' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     */
    protected function getServiceContainerService()
    {
        throw new RuntimeException('You have requested a synthetic service ("service_container"). The DIC does not know how to construct this service.');
    }

    /**
     * Gets the 'session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Session A Symfony\Component\HttpFoundation\Session\Session instance.
     */
    protected function getSessionService()
    {
        return $this-&gt;services['session'] = new \Symfony\Component\HttpFoundation\Session\Session($this-&gt;get('session.storage.native'), new \Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag(), new \Symfony\Component\HttpFoundation\Session\Flash\FlashBag());
</codefragment>
  </duplication>
  <duplication lines="159" tokens="212">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="2400"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="2404"/>
    <codefragment>        return $this-&gt;services['session'] = new \Symfony\Component\HttpFoundation\Session\Session($this-&gt;get('session.storage.native'), new \Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag(), new \Symfony\Component\HttpFoundation\Session\Flash\FlashBag());
    }

    /**
     * Gets the 'session.save_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SaveSessionListener A Symfony\Component\HttpKernel\EventListener\SaveSessionListener instance.
     */
    protected function getSession_SaveListenerService()
    {
        return $this-&gt;services['session.save_listener'] = new \Symfony\Component\HttpKernel\EventListener\SaveSessionListener();
    }

    /**
     * Gets the 'session.storage.filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage instance.
     */
    protected function getSession_Storage_FilesystemService()
    {
        return $this-&gt;services['session.storage.filesystem'] = new \Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage((__DIR__.'/sessions'), 'MOCKSESSID', $this-&gt;get('session.storage.metadata_bag'));
    }

    /**
     * Gets the 'session.storage.native' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage instance.
     */
    protected function getSession_Storage_NativeService()
    {
        return $this-&gt;services['session.storage.native'] = new \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage(array('cookie_httponly' =&gt; true, 'gc_probability' =&gt; 1), NULL, $this-&gt;get('session.storage.metadata_bag'));
    }

    /**
     * Gets the 'session.storage.php_bridge' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage instance.
     */
    protected function getSession_Storage_PhpBridgeService()
    {
        return $this-&gt;services['session.storage.php_bridge'] = new \Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage(NULL, $this-&gt;get('session.storage.metadata_bag'));
    }

    /**
     * Gets the 'session_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\EventListener\SessionListener A Symfony\Bundle\FrameworkBundle\EventListener\SessionListener instance.
     */
    protected function getSessionListenerService()
    {
        return $this-&gt;services['session_listener'] = new \Symfony\Bundle\FrameworkBundle\EventListener\SessionListener($this);
    }

    /**
     * Gets the 'streamed_response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener A Symfony\Component\HttpKernel\EventListener\StreamedResponseListener instance.
     */
    protected function getStreamedResponseListenerService()
    {
        return $this-&gt;services['streamed_response_listener'] = new \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener();
    }

    /**
     * Gets the 'swiftmailer.email_sender.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener A Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener instance.
     */
    protected function getSwiftmailer_EmailSender_ListenerService()
    {
        return $this-&gt;services['swiftmailer.email_sender.listener'] = new \Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener($this, $this-&gt;get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'swiftmailer.mailer.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Mailer A Swift_Mailer instance.
     */
    protected function getSwiftmailer_Mailer_DefaultService()
    {
        return $this-&gt;services['swiftmailer.mailer.default'] = new \Swift_Mailer($this-&gt;get('swiftmailer.mailer.default.transport'));
    }

    /**
     * Gets the 'swiftmailer.mailer.default.plugin.messagelogger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Plugins_MessageLogger A Swift_Plugins_MessageLogger instance.
     */
    protected function getSwiftmailer_Mailer_Default_Plugin_MessageloggerService()
    {
        return $this-&gt;services['swiftmailer.mailer.default.plugin.messagelogger'] = new \Swift_Plugins_MessageLogger();
    }

    /**
     * Gets the 'swiftmailer.mailer.default.spool' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_MemorySpool A Swift_MemorySpool instance.
     */
    protected function getSwiftmailer_Mailer_Default_SpoolService()
    {
        return $this-&gt;services['swiftmailer.mailer.default.spool'] = new \Swift_MemorySpool();
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Transport_SpoolTransport A Swift_Transport_SpoolTransport instance.
     */
    protected function getSwiftmailer_Mailer_Default_TransportService()
    {
        $this-&gt;services['swiftmailer.mailer.default.transport'] = $instance = new \Swift_Transport_SpoolTransport($this-&gt;get('swiftmailer.mailer.default.transport.eventdispatcher'), $this-&gt;get('swiftmailer.mailer.default.spool'));

        $instance-&gt;registerPlugin($this-&gt;get('swiftmailer.mailer.default.plugin.messagelogger'));

        return $instance;
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport.real' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Transport_EsmtpTransport A Swift_Transport_EsmtpTransport instance.
     */
    protected function getSwiftmailer_Mailer_Default_Transport_RealService()
</codefragment>
  </duplication>
  <duplication lines="102" tokens="158">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="2584"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="2575"/>
    <codefragment>    protected function getTemplatingService()
    {
        return $this-&gt;services['templating'] = new \Symfony\Bundle\TwigBundle\TwigEngine($this-&gt;get('twig'), $this-&gt;get('templating.name_parser'), $this-&gt;get('templating.locator'));
    }

    /**
     * Gets the 'templating.filename_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser A Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser instance.
     */
    protected function getTemplating_FilenameParserService()
    {
        return $this-&gt;services['templating.filename_parser'] = new \Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser();
    }

    /**
     * Gets the 'templating.helper.assets' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\AssetsHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\AssetsHelper instance.
     */
    protected function getTemplating_Helper_AssetsService()
    {
        return $this-&gt;services['templating.helper.assets'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\AssetsHelper($this-&gt;get('assets.packages'), array());
    }

    /**
     * Gets the 'templating.helper.logout_url' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper A Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper instance.
     */
    protected function getTemplating_Helper_LogoutUrlService()
    {
        return $this-&gt;services['templating.helper.logout_url'] = new \Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper($this-&gt;get('security.logout_url_generator'));
    }

    /**
     * Gets the 'templating.helper.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\RouterHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\RouterHelper instance.
     */
    protected function getTemplating_Helper_RouterService()
    {
        return $this-&gt;services['templating.helper.router'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\RouterHelper($this-&gt;get('router'));
    }

    /**
     * Gets the 'templating.helper.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper A Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper instance.
     */
    protected function getTemplating_Helper_SecurityService()
    {
        return $this-&gt;services['templating.helper.security'] = new \Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper($this-&gt;get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'templating.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader A Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader instance.
     */
    protected function getTemplating_LoaderService()
    {
        return $this-&gt;services['templating.loader'] = new \Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader($this-&gt;get('templating.locator'));
    }

    /**
     * Gets the 'templating.name_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser A Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser instance.
     */
    protected function getTemplating_NameParserService()
    {
        return $this-&gt;services['templating.name_parser'] = new \Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser($this-&gt;get('kernel'));
    }

    /**
     * Gets the 'translation.dumper.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
</codefragment>
  </duplication>
  <duplication lines="414" tokens="1800">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="2688"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="2722"/>
    <codefragment>    protected function getTranslation_Dumper_CsvService()
    {
        return $this-&gt;services['translation.dumper.csv'] = new \Symfony\Component\Translation\Dumper\CsvFileDumper();
    }

    /**
     * Gets the 'translation.dumper.ini' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\IniFileDumper A Symfony\Component\Translation\Dumper\IniFileDumper instance.
     */
    protected function getTranslation_Dumper_IniService()
    {
        return $this-&gt;services['translation.dumper.ini'] = new \Symfony\Component\Translation\Dumper\IniFileDumper();
    }

    /**
     * Gets the 'translation.dumper.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\JsonFileDumper A Symfony\Component\Translation\Dumper\JsonFileDumper instance.
     */
    protected function getTranslation_Dumper_JsonService()
    {
        return $this-&gt;services['translation.dumper.json'] = new \Symfony\Component\Translation\Dumper\JsonFileDumper();
    }

    /**
     * Gets the 'translation.dumper.mo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\MoFileDumper A Symfony\Component\Translation\Dumper\MoFileDumper instance.
     */
    protected function getTranslation_Dumper_MoService()
    {
        return $this-&gt;services['translation.dumper.mo'] = new \Symfony\Component\Translation\Dumper\MoFileDumper();
    }

    /**
     * Gets the 'translation.dumper.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\PhpFileDumper A Symfony\Component\Translation\Dumper\PhpFileDumper instance.
     */
    protected function getTranslation_Dumper_PhpService()
    {
        return $this-&gt;services['translation.dumper.php'] = new \Symfony\Component\Translation\Dumper\PhpFileDumper();
    }

    /**
     * Gets the 'translation.dumper.po' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\PoFileDumper A Symfony\Component\Translation\Dumper\PoFileDumper instance.
     */
    protected function getTranslation_Dumper_PoService()
    {
        return $this-&gt;services['translation.dumper.po'] = new \Symfony\Component\Translation\Dumper\PoFileDumper();
    }

    /**
     * Gets the 'translation.dumper.qt' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\QtFileDumper A Symfony\Component\Translation\Dumper\QtFileDumper instance.
     */
    protected function getTranslation_Dumper_QtService()
    {
        return $this-&gt;services['translation.dumper.qt'] = new \Symfony\Component\Translation\Dumper\QtFileDumper();
    }

    /**
     * Gets the 'translation.dumper.res' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\IcuResFileDumper A Symfony\Component\Translation\Dumper\IcuResFileDumper instance.
     */
    protected function getTranslation_Dumper_ResService()
    {
        return $this-&gt;services['translation.dumper.res'] = new \Symfony\Component\Translation\Dumper\IcuResFileDumper();
    }

    /**
     * Gets the 'translation.dumper.xliff' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\XliffFileDumper A Symfony\Component\Translation\Dumper\XliffFileDumper instance.
     */
    protected function getTranslation_Dumper_XliffService()
    {
        return $this-&gt;services['translation.dumper.xliff'] = new \Symfony\Component\Translation\Dumper\XliffFileDumper();
    }

    /**
     * Gets the 'translation.dumper.yml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\YamlFileDumper A Symfony\Component\Translation\Dumper\YamlFileDumper instance.
     */
    protected function getTranslation_Dumper_YmlService()
    {
        return $this-&gt;services['translation.dumper.yml'] = new \Symfony\Component\Translation\Dumper\YamlFileDumper();
    }

    /**
     * Gets the 'translation.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Extractor\ChainExtractor A Symfony\Component\Translation\Extractor\ChainExtractor instance.
     */
    protected function getTranslation_ExtractorService()
    {
        $this-&gt;services['translation.extractor'] = $instance = new \Symfony\Component\Translation\Extractor\ChainExtractor();

        $instance-&gt;addExtractor('php', $this-&gt;get('translation.extractor.php'));
        $instance-&gt;addExtractor('twig', $this-&gt;get('twig.translation.extractor'));

        return $instance;
    }

    /**
     * Gets the 'translation.extractor.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor A Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor instance.
     */
    protected function getTranslation_Extractor_PhpService()
    {
        return $this-&gt;services['translation.extractor.php'] = new \Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor();
    }

    /**
     * Gets the 'translation.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader A Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader instance.
     */
    protected function getTranslation_LoaderService()
    {
        $a = $this-&gt;get('translation.loader.xliff');

        $this-&gt;services['translation.loader'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader();

        $instance-&gt;addLoader('php', $this-&gt;get('translation.loader.php'));
        $instance-&gt;addLoader('yml', $this-&gt;get('translation.loader.yml'));
        $instance-&gt;addLoader('xlf', $a);
        $instance-&gt;addLoader('xliff', $a);
        $instance-&gt;addLoader('po', $this-&gt;get('translation.loader.po'));
        $instance-&gt;addLoader('mo', $this-&gt;get('translation.loader.mo'));
        $instance-&gt;addLoader('ts', $this-&gt;get('translation.loader.qt'));
        $instance-&gt;addLoader('csv', $this-&gt;get('translation.loader.csv'));
        $instance-&gt;addLoader('res', $this-&gt;get('translation.loader.res'));
        $instance-&gt;addLoader('dat', $this-&gt;get('translation.loader.dat'));
        $instance-&gt;addLoader('ini', $this-&gt;get('translation.loader.ini'));
        $instance-&gt;addLoader('json', $this-&gt;get('translation.loader.json'));

        return $instance;
    }

    /**
     * Gets the 'translation.loader.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\CsvFileLoader A Symfony\Component\Translation\Loader\CsvFileLoader instance.
     */
    protected function getTranslation_Loader_CsvService()
    {
        return $this-&gt;services['translation.loader.csv'] = new \Symfony\Component\Translation\Loader\CsvFileLoader();
    }

    /**
     * Gets the 'translation.loader.dat' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuDatFileLoader A Symfony\Component\Translation\Loader\IcuDatFileLoader instance.
     */
    protected function getTranslation_Loader_DatService()
    {
        return $this-&gt;services['translation.loader.dat'] = new \Symfony\Component\Translation\Loader\IcuDatFileLoader();
    }

    /**
     * Gets the 'translation.loader.ini' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IniFileLoader A Symfony\Component\Translation\Loader\IniFileLoader instance.
     */
    protected function getTranslation_Loader_IniService()
    {
        return $this-&gt;services['translation.loader.ini'] = new \Symfony\Component\Translation\Loader\IniFileLoader();
    }

    /**
     * Gets the 'translation.loader.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\JsonFileLoader A Symfony\Component\Translation\Loader\JsonFileLoader instance.
     */
    protected function getTranslation_Loader_JsonService()
    {
        return $this-&gt;services['translation.loader.json'] = new \Symfony\Component\Translation\Loader\JsonFileLoader();
    }

    /**
     * Gets the 'translation.loader.mo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\MoFileLoader A Symfony\Component\Translation\Loader\MoFileLoader instance.
     */
    protected function getTranslation_Loader_MoService()
    {
        return $this-&gt;services['translation.loader.mo'] = new \Symfony\Component\Translation\Loader\MoFileLoader();
    }

    /**
     * Gets the 'translation.loader.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\PhpFileLoader A Symfony\Component\Translation\Loader\PhpFileLoader instance.
     */
    protected function getTranslation_Loader_PhpService()
    {
        return $this-&gt;services['translation.loader.php'] = new \Symfony\Component\Translation\Loader\PhpFileLoader();
    }

    /**
     * Gets the 'translation.loader.po' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\PoFileLoader A Symfony\Component\Translation\Loader\PoFileLoader instance.
     */
    protected function getTranslation_Loader_PoService()
    {
        return $this-&gt;services['translation.loader.po'] = new \Symfony\Component\Translation\Loader\PoFileLoader();
    }

    /**
     * Gets the 'translation.loader.qt' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\QtFileLoader A Symfony\Component\Translation\Loader\QtFileLoader instance.
     */
    protected function getTranslation_Loader_QtService()
    {
        return $this-&gt;services['translation.loader.qt'] = new \Symfony\Component\Translation\Loader\QtFileLoader();
    }

    /**
     * Gets the 'translation.loader.res' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuResFileLoader A Symfony\Component\Translation\Loader\IcuResFileLoader instance.
     */
    protected function getTranslation_Loader_ResService()
    {
        return $this-&gt;services['translation.loader.res'] = new \Symfony\Component\Translation\Loader\IcuResFileLoader();
    }

    /**
     * Gets the 'translation.loader.xliff' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\XliffFileLoader A Symfony\Component\Translation\Loader\XliffFileLoader instance.
     */
    protected function getTranslation_Loader_XliffService()
    {
        return $this-&gt;services['translation.loader.xliff'] = new \Symfony\Component\Translation\Loader\XliffFileLoader();
    }

    /**
     * Gets the 'translation.loader.yml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\YamlFileLoader A Symfony\Component\Translation\Loader\YamlFileLoader instance.
     */
    protected function getTranslation_Loader_YmlService()
    {
        return $this-&gt;services['translation.loader.yml'] = new \Symfony\Component\Translation\Loader\YamlFileLoader();
    }

    /**
     * Gets the 'translation.writer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Writer\TranslationWriter A Symfony\Component\Translation\Writer\TranslationWriter instance.
     */
    protected function getTranslation_WriterService()
    {
        $this-&gt;services['translation.writer'] = $instance = new \Symfony\Component\Translation\Writer\TranslationWriter();

        $instance-&gt;addDumper('php', $this-&gt;get('translation.dumper.php'));
        $instance-&gt;addDumper('xlf', $this-&gt;get('translation.dumper.xliff'));
        $instance-&gt;addDumper('po', $this-&gt;get('translation.dumper.po'));
        $instance-&gt;addDumper('mo', $this-&gt;get('translation.dumper.mo'));
        $instance-&gt;addDumper('yml', $this-&gt;get('translation.dumper.yml'));
        $instance-&gt;addDumper('ts', $this-&gt;get('translation.dumper.qt'));
        $instance-&gt;addDumper('csv', $this-&gt;get('translation.dumper.csv'));
        $instance-&gt;addDumper('ini', $this-&gt;get('translation.dumper.ini'));
        $instance-&gt;addDumper('json', $this-&gt;get('translation.dumper.json'));
        $instance-&gt;addDumper('res', $this-&gt;get('translation.dumper.res'));

        return $instance;
    }

    /**
     * Gets the 'translator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\DataCollectorTranslator A Symfony\Component\Translation\DataCollectorTranslator instance.
     */
    protected function getTranslatorService()
    {
        return $this-&gt;services['translator'] = new \Symfony\Component\Translation\DataCollectorTranslator(new \Symfony\Component\Translation\LoggingTranslator($this-&gt;get('translator.default'), $this-&gt;get('monolog.logger.translation')));
    }

    /**
     * Gets the 'translator.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\Translator A Symfony\Bundle\FrameworkBundle\Translation\Translator instance.
     */
    protected function getTranslator_DefaultService()
    {
        $this-&gt;services['translator.default'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\Translator($this, new \Symfony\Component\Translation\MessageSelector(), array('translation.loader.php' =&gt; array(0 =&gt; 'php'), 'translation.loader.yml' =&gt; array(0 =&gt; 'yml'), 'translation.loader.xliff' =&gt; array(0 =&gt; 'xlf', 1 =&gt; 'xliff'), 'translation.loader.po' =&gt; array(0 =&gt; 'po'), 'translation.loader.mo' =&gt; array(0 =&gt; 'mo'), 'translation.loader.qt' =&gt; array(0 =&gt; 'ts'), 'translation.loader.csv' =&gt; array(0 =&gt; 'csv'), 'translation.loader.res' =&gt; array(0 =&gt; 'res'), 'translation.loader.dat' =&gt; array(0 =&gt; 'dat'), 'translation.loader.ini' =&gt; array(0 =&gt; 'ini'), 'translation.loader.json' =&gt; array(0 =&gt; 'json')), array('cache_dir' =&gt; (__DIR__.'/translations'), 'debug' =&gt; true, 'resource_files' =&gt; array('sv' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sv.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sv.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.sv.xlf')), 'tr' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.tr.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.tr.xlf')), 'it' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.it.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.it.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.it.xlf')), 'ro' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ro.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ro.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.ro.xlf')), 'fr' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fr.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fr.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.fr.xlf')), 'es' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.es.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.es.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.es.xlf')), 'el' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.el.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.el.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.el.xlf')), 'ja' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ja.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ja.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.ja.xlf')), 'eu' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.eu.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.eu.xlf')), 'uk' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.uk.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.uk.xlf')), 'ar' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ar.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ar.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.ar.xlf')), 'mn' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.mn.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.mn.xlf')), 'pt' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pt.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pt.xlf')), 'hu' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hu.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hu.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.hu.xlf')), 'et' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.et.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.et.xlf')), 'af' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.af.xlf')), 'fi' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fi.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fi.xlf')), 'nl' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.nl.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.nl.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.nl.xlf')), 'sq' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sq.xlf')), 'pl' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pl.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pl.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.pl.xlf')), 'de' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.de.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.de.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.de.xlf')), 'bg' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.bg.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.bg.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.bg.xlf')), 'da' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.da.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.da.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.da.xlf')), 'cy' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.cy.xlf')), 'pt_BR' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pt_BR.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pt_BR.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.pt_BR.xlf')), 'gl' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.gl.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.gl.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.gl.xlf')), 'en' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.en.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.en.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.en.xlf')), 'sr_Latn' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sr_Latn.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sr_Latn.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.sr_Latn.xlf')), 'zh_CN' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.zh_CN.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.zh_CN.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.zh_CN.xlf')), 'lt' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lt.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lt.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.lt.xlf')), 'hy' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hy.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hy.xlf')), 'fa' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fa.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fa.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.fa.xlf')), 'sr_Cyrl' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sr_Cyrl.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sr_Cyrl.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.sr_Cyrl.xlf')), 'az' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.az.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.az.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.az.xlf')), 'cs' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.cs.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.cs.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.cs.xlf')), 'zh_TW' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.zh_TW.xlf')), 'th' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.th.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.th.xlf')), 'he' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.he.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.he.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.he.xlf')), 'sk' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sk.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sk.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.sk.xlf')), 'no' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.no.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.no.xlf')), 'id' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.id.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.id.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.id.xlf')), 'hr' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hr.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hr.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.hr.xlf')), 'ru' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ru.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ru.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.ru.xlf'), 3 =&gt; ($this-&gt;targetDirs[3].'/src/WordBundle/Resources/translations/messages.ru.yml')), 'nb' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.nb.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.nb.xlf')), 'sl' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sl.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sl.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.sl.xlf')), 'lb' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lb.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lb.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.lb.xlf')), 'vi' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.vi.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.vi.xlf')), 'ca' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ca.xlf'), 1 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ca.xlf'), 2 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.ca.xlf')), 'lv' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lv.xlf')), 'ua' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.ua.xlf')), 'pt_PT' =&gt; array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.pt_PT.xlf')))), array());

        $instance-&gt;setConfigCacheFactory($this-&gt;get('config_cache_factory'));
        $instance-&gt;setFallbackLocales(array(0 =&gt; 'ru'));

        return $instance;
    }

    /**
     * Gets the 'translator_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\TranslatorListener A Symfony\Component\HttpKernel\EventListener\TranslatorListener instance.
     */
    protected function getTranslatorListenerService()
    {
        return $this-&gt;services['translator_listener'] = new \Symfony\Component\HttpKernel\EventListener\TranslatorListener($this-&gt;get('translator'), $this-&gt;get('request_stack'));
    }

    /**
     * Gets the 'twig' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Environment A Twig_Environment instance.
     */
    protected function getTwigService()
    {
        $a = $this-&gt;get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $b = $this-&gt;get('request_stack');
        $c = $this-&gt;get('fragment.handler');

        $d = new \Symfony\Bridge\Twig\Extension\HttpFoundationExtension($b);

        $e = new \Symfony\Bridge\Twig\AppVariable();
        $e-&gt;setEnvironment('dev');
</codefragment>
  </duplication>
  <duplication lines="285" tokens="1028">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="3102"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="3136"/>
    <codefragment>        $e-&gt;setDebug(true);
        if ($this-&gt;has('security.token_storage')) {
            $e-&gt;setTokenStorage($this-&gt;get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }
        if ($this-&gt;has('request_stack')) {
            $e-&gt;setRequestStack($b);
        }
        $e-&gt;setContainer($this);

        $this-&gt;services['twig'] = $instance = new \Twig_Environment($this-&gt;get('twig.loader'), array('debug' =&gt; true, 'strict_variables' =&gt; true, 'exception_controller' =&gt; 'twig.controller.exception:showAction', 'form_themes' =&gt; array(0 =&gt; 'form_div_layout.html.twig'), 'autoescape' =&gt; 'filename', 'cache' =&gt; (__DIR__.'/twig'), 'charset' =&gt; 'UTF-8', 'paths' =&gt; array(), 'date' =&gt; array('format' =&gt; 'F j, Y H:i', 'interval_format' =&gt; '%d days', 'timezone' =&gt; NULL), 'number_format' =&gt; array('decimals' =&gt; 0, 'decimal_point' =&gt; '.', 'thousands_separator' =&gt; ',')));

        $instance-&gt;addExtension(new \Symfony\Bridge\Twig\Extension\LogoutUrlExtension($this-&gt;get('security.logout_url_generator')));
        $instance-&gt;addExtension(new \Symfony\Bridge\Twig\Extension\SecurityExtension($this-&gt;get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $instance-&gt;addExtension(new \Symfony\Bridge\Twig\Extension\ProfilerExtension($this-&gt;get('twig.profile'), $a));
        $instance-&gt;addExtension(new \Symfony\Bridge\Twig\Extension\TranslationExtension($this-&gt;get('translator')));
        $instance-&gt;addExtension(new \Symfony\Bridge\Twig\Extension\AssetExtension($this-&gt;get('assets.packages'), $d));
        $instance-&gt;addExtension(new \Symfony\Bundle\TwigBundle\Extension\ActionsExtension($c));
        $instance-&gt;addExtension(new \Symfony\Bridge\Twig\Extension\CodeExtension(NULL, $this-&gt;targetDirs[2], 'UTF-8'));
        $instance-&gt;addExtension(new \Symfony\Bridge\Twig\Extension\RoutingExtension($this-&gt;get('router')));
        $instance-&gt;addExtension(new \Symfony\Bridge\Twig\Extension\YamlExtension());
        $instance-&gt;addExtension(new \Symfony\Bridge\Twig\Extension\StopwatchExtension($a, true));
        $instance-&gt;addExtension(new \Symfony\Bridge\Twig\Extension\ExpressionExtension());
        $instance-&gt;addExtension(new \Symfony\Bridge\Twig\Extension\HttpKernelExtension($c));
        $instance-&gt;addExtension($d);
        $instance-&gt;addExtension(new \Symfony\Bridge\Twig\Extension\FormExtension(new \Symfony\Bridge\Twig\Form\TwigRenderer(new \Symfony\Bridge\Twig\Form\TwigRendererEngine(array(0 =&gt; 'form_div_layout.html.twig')), $this-&gt;get('security.csrf.token_manager', ContainerInterface::NULL_ON_INVALID_REFERENCE))));
        $instance-&gt;addExtension(new \Twig_Extension_Debug());
        $instance-&gt;addExtension(new \Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension());
        $instance-&gt;addExtension(new \Symfony\Bundle\AsseticBundle\Twig\AsseticExtension($this-&gt;get('assetic.asset_factory'), $this-&gt;get('templating.name_parser'), true, array(), array(0 =&gt; 'FrameworkBundle', 1 =&gt; 'SecurityBundle', 2 =&gt; 'TwigBundle', 3 =&gt; 'MonologBundle', 4 =&gt; 'SwiftmailerBundle', 5 =&gt; 'DoctrineBundle', 6 =&gt; 'SensioFrameworkExtraBundle', 7 =&gt; 'AsseticBundle', 8 =&gt; 'AppBundle', 9 =&gt; 'WordBundle', 10 =&gt; 'DebugBundle', 11 =&gt; 'WebProfilerBundle', 12 =&gt; 'SensioDistributionBundle', 13 =&gt; 'SensioGeneratorBundle'), new \Symfony\Bundle\AsseticBundle\DefaultValueSupplier($this)));
        $instance-&gt;addExtension(new \Symfony\Bridge\Twig\Extension\DumpExtension($this-&gt;get('var_dumper.cloner')));
        $instance-&gt;addExtension(new \Symfony\Bundle\WebProfilerBundle\Twig\WebProfilerExtension());
        $instance-&gt;addGlobal('app', $e);
        call_user_func(array(new \Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator('F j, Y H:i', '%d days', NULL, 0, '.', ','), 'configure'), $instance);

        return $instance;
    }

    /**
     * Gets the 'twig.controller.exception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Controller\ExceptionController A Symfony\Bundle\TwigBundle\Controller\ExceptionController instance.
     */
    protected function getTwig_Controller_ExceptionService()
    {
        return $this-&gt;services['twig.controller.exception'] = new \Symfony\Bundle\TwigBundle\Controller\ExceptionController($this-&gt;get('twig'), true);
    }

    /**
     * Gets the 'twig.controller.preview_error' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Controller\PreviewErrorController A Symfony\Bundle\TwigBundle\Controller\PreviewErrorController instance.
     */
    protected function getTwig_Controller_PreviewErrorService()
    {
        return $this-&gt;services['twig.controller.preview_error'] = new \Symfony\Bundle\TwigBundle\Controller\PreviewErrorController($this-&gt;get('http_kernel'), 'twig.controller.exception:showAction');
    }

    /**
     * Gets the 'twig.exception_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ExceptionListener A Symfony\Component\HttpKernel\EventListener\ExceptionListener instance.
     */
    protected function getTwig_ExceptionListenerService()
    {
        return $this-&gt;services['twig.exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ExceptionListener('twig.controller.exception:showAction', $this-&gt;get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'twig.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Loader\FilesystemLoader A Symfony\Bundle\TwigBundle\Loader\FilesystemLoader instance.
     */
    protected function getTwig_LoaderService()
    {
        $this-&gt;services['twig.loader'] = $instance = new \Symfony\Bundle\TwigBundle\Loader\FilesystemLoader($this-&gt;get('templating.locator'), $this-&gt;get('templating.name_parser'));

        $instance-&gt;addPath(($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/views'), 'Framework');
        $instance-&gt;addPath(($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle/Resources/views'), 'Security');
        $instance-&gt;addPath(($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/Resources/views'), 'Twig');
        $instance-&gt;addPath(($this-&gt;targetDirs[3].'/vendor/symfony/swiftmailer-bundle/Resources/views'), 'Swiftmailer');
        $instance-&gt;addPath(($this-&gt;targetDirs[3].'/vendor/doctrine/doctrine-bundle/Resources/views'), 'Doctrine');
        $instance-&gt;addPath(($this-&gt;targetDirs[3].'/src/WordBundle/Resources/views'), 'Word');
        $instance-&gt;addPath(($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/DebugBundle/Resources/views'), 'Debug');
        $instance-&gt;addPath(($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/views'), 'WebProfiler');
        $instance-&gt;addPath(($this-&gt;targetDirs[2].'/Resources/views'));
        $instance-&gt;addPath(($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bridge/Twig/Resources/views/Form'));

        return $instance;
    }

    /**
     * Gets the 'twig.profile' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Profiler_Profile A Twig_Profiler_Profile instance.
     */
    protected function getTwig_ProfileService()
    {
        return $this-&gt;services['twig.profile'] = new \Twig_Profiler_Profile();
    }

    /**
     * Gets the 'twig.translation.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Twig\Translation\TwigExtractor A Symfony\Bridge\Twig\Translation\TwigExtractor instance.
     */
    protected function getTwig_Translation_ExtractorService()
    {
        return $this-&gt;services['twig.translation.extractor'] = new \Symfony\Bridge\Twig\Translation\TwigExtractor($this-&gt;get('twig'));
    }

    /**
     * Gets the 'uri_signer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\UriSigner A Symfony\Component\HttpKernel\UriSigner instance.
     */
    protected function getUriSignerService()
    {
        return $this-&gt;services['uri_signer'] = new \Symfony\Component\HttpKernel\UriSigner('3805ce3ad1210248dc8a2f924963f548e502cdb6');
    }

    /**
     * Gets the 'validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\Validator\ValidatorInterface A Symfony\Component\Validator\Validator\ValidatorInterface instance.
     */
    protected function getValidatorService()
    {
        return $this-&gt;services['validator'] = $this-&gt;get('validator.builder')-&gt;getValidator();
    }

    /**
     * Gets the 'validator.builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\ValidatorBuilderInterface A Symfony\Component\Validator\ValidatorBuilderInterface instance.
     */
    protected function getValidator_BuilderService()
    {
        $this-&gt;services['validator.builder'] = $instance = \Symfony\Component\Validator\Validation::createValidatorBuilder();

        $instance-&gt;setConstraintValidatorFactory(new \Symfony\Bundle\FrameworkBundle\Validator\ConstraintValidatorFactory($this, array('validator.expression' =&gt; 'validator.expression', 'Symfony\\Component\\Validator\\Constraints\\EmailValidator' =&gt; 'validator.email', 'security.validator.user_password' =&gt; 'security.validator.user_password', 'doctrine.orm.validator.unique' =&gt; 'doctrine.orm.validator.unique')));
        $instance-&gt;setTranslator($this-&gt;get('translator'));
        $instance-&gt;setTranslationDomain('validators');
        $instance-&gt;addXmlMappings(array(0 =&gt; ($this-&gt;targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/config/validation.xml')));
        $instance-&gt;enableAnnotationMapping($this-&gt;get('annotation_reader'));
        $instance-&gt;addMethodMapping('loadValidatorMetadata');
        $instance-&gt;addObjectInitializers(array(0 =&gt; $this-&gt;get('doctrine.orm.validator_initializer')));

        return $instance;
    }

    /**
     * Gets the 'validator.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\Constraints\EmailValidator A Symfony\Component\Validator\Constraints\EmailValidator instance.
     */
    protected function getValidator_EmailService()
    {
        return $this-&gt;services['validator.email'] = new \Symfony\Component\Validator\Constraints\EmailValidator(false);
    }

    /**
     * Gets the 'validator.expression' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\Constraints\ExpressionValidator A Symfony\Component\Validator\Constraints\ExpressionValidator instance.
     */
    protected function getValidator_ExpressionService()
    {
        return $this-&gt;services['validator.expression'] = new \Symfony\Component\Validator\Constraints\ExpressionValidator($this-&gt;get('property_accessor'));
    }

    /**
     * Gets the 'var_dumper.cli_dumper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\VarDumper\Dumper\CliDumper A Symfony\Component\VarDumper\Dumper\CliDumper instance.
     */
    protected function getVarDumper_CliDumperService()
    {
        return $this-&gt;services['var_dumper.cli_dumper'] = new \Symfony\Component\VarDumper\Dumper\CliDumper(NULL, 'UTF-8');
    }

    /**
     * Gets the 'var_dumper.cloner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\VarDumper\Cloner\VarCloner A Symfony\Component\VarDumper\Cloner\VarCloner instance.
     */
    protected function getVarDumper_ClonerService()
    {
        $this-&gt;services['var_dumper.cloner'] = $instance = new \Symfony\Component\VarDumper\Cloner\VarCloner();

        $instance-&gt;setMaxItems(2500);
        $instance-&gt;setMaxString(-1);

        return $instance;
    }

    /**
     * Gets the 'web_profiler.controller.exception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController A Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController instance.
     */
    protected function getWebProfiler_Controller_ExceptionService()
    {
        return $this-&gt;services['web_profiler.controller.exception'] = new \Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController($this-&gt;get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this-&gt;get('twig'), true);
    }

    /**
     * Gets the 'web_profiler.controller.profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController A Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController instance.
     */
    protected function getWebProfiler_Controller_ProfilerService()
    {
        return $this-&gt;services['web_profiler.controller.profiler'] = new \Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController($this-&gt;get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this-&gt;get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this-&gt;get('twig'), array('data_collector.request' =&gt; array(0 =&gt; 'request', 1 =&gt; '@WebProfiler/Collector/request.html.twig'), 'data_collector.time' =&gt; array(0 =&gt; 'time', 1 =&gt; '@WebProfiler/Collector/time.html.twig'), 'data_collector.memory' =&gt; array(0 =&gt; 'memory', 1 =&gt; '@WebProfiler/Collector/memory.html.twig'), 'data_collector.ajax' =&gt; array(0 =&gt; 'ajax', 1 =&gt; '@WebProfiler/Collector/ajax.html.twig'), 'data_collector.form' =&gt; array(0 =&gt; 'form', 1 =&gt; '@WebProfiler/Collector/form.html.twig'), 'data_collector.exception' =&gt; array(0 =&gt; 'exception', 1 =&gt; '@WebProfiler/Collector/exception.html.twig'), 'data_collector.logger' =&gt; array(0 =&gt; 'logger', 1 =&gt; '@WebProfiler/Collector/logger.html.twig'), 'data_collector.events' =&gt; array(0 =&gt; 'events', 1 =&gt; '@WebProfiler/Collector/events.html.twig'), 'data_collector.router' =&gt; array(0 =&gt; 'router', 1 =&gt; '@WebProfiler/Collector/router.html.twig'), 'data_collector.translation' =&gt; array(0 =&gt; 'translation', 1 =&gt; '@WebProfiler/Collector/translation.html.twig'), 'data_collector.security' =&gt; array(0 =&gt; 'security', 1 =&gt; '@Security/Collector/security.html.twig'), 'data_collector.twig' =&gt; array(0 =&gt; 'twig', 1 =&gt; '@WebProfiler/Collector/twig.html.twig'), 'data_collector.doctrine' =&gt; array(0 =&gt; 'db', 1 =&gt; '@Doctrine/Collector/db.html.twig'), 'swiftmailer.data_collector' =&gt; array(0 =&gt; 'swiftmailer', 1 =&gt; '@Swiftmailer/Collector/swiftmailer.html.twig'), 'data_collector.dump' =&gt; array(0 =&gt; 'dump', 1 =&gt; '@Debug/Profiler/dump.html.twig'), 'data_collector.config' =&gt; array(0 =&gt; 'config', 1 =&gt; '@WebProfiler/Collector/config.html.twig')), 'bottom');
    }

    /**
     * Gets the 'web_profiler.controller.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\RouterController A Symfony\Bundle\WebProfilerBundle\Controller\RouterController instance.
     */
    protected function getWebProfiler_Controller_RouterService()
    {
        return $this-&gt;services['web_profiler.controller.router'] = new \Symfony\Bundle\WebProfilerBundle\Controller\RouterController($this-&gt;get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this-&gt;get('twig'), $this-&gt;get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'web_profiler.debug_toolbar' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener A Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener instance.
     */
    protected function getWebProfiler_DebugToolbarService()
    {
        return $this-&gt;services['web_profiler.debug_toolbar'] = new \Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener($this-&gt;get('twig'), false, 2, 'bottom', $this-&gt;get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE), '^/(app(_[\\w]+)?\\.php/)?_wdt');
    }

</codefragment>
  </duplication>
  <duplication lines="98" tokens="192">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="3399"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="3420"/>
    <codefragment>    protected function getAssetic_AssetFactoryService()
    {
        $this-&gt;services['assetic.asset_factory'] = $instance = new \Symfony\Bundle\AsseticBundle\Factory\AssetFactory($this-&gt;get('kernel'), $this, $this-&gt;getParameterBag(), ($this-&gt;targetDirs[2].'/../web'), true);

        $instance-&gt;addWorker(new \Symfony\Bundle\AsseticBundle\Factory\Worker\UseControllerWorker());

        return $instance;
    }

    /**
     * Gets the 'controller_name_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser A Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser instance.
     */
    protected function getControllerNameConverterService()
    {
        return $this-&gt;services['controller_name_converter'] = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser($this-&gt;get('kernel'));
    }

    /**
     * Gets the 'doctrine.dbal.logger.profiling.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Doctrine\DBAL\Logging\DebugStack A Doctrine\DBAL\Logging\DebugStack instance.
     */
    protected function getDoctrine_Dbal_Logger_Profiling_DefaultService()
    {
        return $this-&gt;services['doctrine.dbal.logger.profiling.default'] = new \Doctrine\DBAL\Logging\DebugStack();
    }

    /**
     * Gets the 'router.request_context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Routing\RequestContext A Symfony\Component\Routing\RequestContext instance.
     */
    protected function getRouter_RequestContextService()
    {
        return $this-&gt;services['router.request_context'] = new \Symfony\Component\Routing\RequestContext('', 'GET', 'localhost', 'http', 80, 443);
    }

    /**
     * Gets the 'security.access.decision_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AccessDecisionManager A Symfony\Component\Security\Core\Authorization\AccessDecisionManager instance.
     */
    protected function getSecurity_Access_DecisionManagerService()
    {
        $a = $this-&gt;get('security.authentication.trust_resolver');

        $this-&gt;services['security.access.decision_manager'] = $instance = new \Symfony\Component\Security\Core\Authorization\AccessDecisionManager(array(), 'affirmative', false, true);

        $instance-&gt;setVoters(array(0 =&gt; new \Symfony\Component\Security\Core\Authorization\Voter\RoleVoter(), 1 =&gt; new \Symfony\Component\Security\Core\Authorization\Voter\ExpressionVoter(new \Symfony\Component\Security\Core\Authorization\ExpressionLanguage(), $a, $this-&gt;get('security.role_hierarchy', ContainerInterface::NULL_ON_INVALID_REFERENCE)), 2 =&gt; new \Symfony\Component\Security\Core\Authorization\Voter\AuthenticatedVoter($a)));

        return $instance;
    }

    /**
     * Gets the 'security.authentication.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager A Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager instance.
     */
    protected function getSecurity_Authentication_ManagerService()
    {
        $this-&gt;services['security.authentication.manager'] = $instance = new \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager(array(0 =&gt; new \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider('5682a498e26fd7.32909122')), true);
</codefragment>
  </duplication>
  <duplication lines="163" tokens="218">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="3496"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="3517"/>
    <codefragment>        $this-&gt;services['security.authentication.manager'] = $instance = new \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager(array(0 =&gt; new \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider('5682a498e26fd7.32909122')), true);

        $instance-&gt;setEventDispatcher($this-&gt;get('debug.event_dispatcher'));

        return $instance;
    }

    /**
     * Gets the 'security.authentication.trust_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver A Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver instance.
     */
    protected function getSecurity_Authentication_TrustResolverService()
    {
        return $this-&gt;services['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver('Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken', 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken');
    }

    /**
     * Gets the 'security.logout_url_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator A Symfony\Component\Security\Http\Logout\LogoutUrlGenerator instance.
     */
    protected function getSecurity_LogoutUrlGeneratorService()
    {
        return $this-&gt;services['security.logout_url_generator'] = new \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator($this-&gt;get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this-&gt;get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this-&gt;get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'security.role_hierarchy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Role\RoleHierarchy A Symfony\Component\Security\Core\Role\RoleHierarchy instance.
     */
    protected function getSecurity_RoleHierarchyService()
    {
        return $this-&gt;services['security.role_hierarchy'] = new \Symfony\Component\Security\Core\Role\RoleHierarchy(array());
    }

    /**
     * Gets the 'session.storage.metadata_bag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag A Symfony\Component\HttpFoundation\Session\Storage\MetadataBag instance.
     */
    protected function getSession_Storage_MetadataBagService()
    {
        return $this-&gt;services['session.storage.metadata_bag'] = new \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag('_sf2_meta', '0');
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport.eventdispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Swift_Events_SimpleEventDispatcher A Swift_Events_SimpleEventDispatcher instance.
     */
    protected function getSwiftmailer_Mailer_Default_Transport_EventdispatcherService()
    {
        return $this-&gt;services['swiftmailer.mailer.default.transport.eventdispatcher'] = new \Swift_Events_SimpleEventDispatcher();
    }

    /**
     * Gets the 'templating.locator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator A Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator instance.
     */
    protected function getTemplating_LocatorService()
    {
        return $this-&gt;services['templating.locator'] = new \Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator($this-&gt;get('file_locator'), __DIR__);
    }

    /**
     * {@inheritdoc}
     */
    public function getParameter($name)
    {
        $name = strtolower($name);

        if (!(isset($this-&gt;parameters[$name]) || array_key_exists($name, $this-&gt;parameters))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }

        return $this-&gt;parameters[$name];
    }

    /**
     * {@inheritdoc}
     */
    public function hasParameter($name)
    {
        $name = strtolower($name);

        return isset($this-&gt;parameters[$name]) || array_key_exists($name, $this-&gt;parameters);
    }

    /**
     * {@inheritdoc}
     */
    public function setParameter($name, $value)
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    /**
     * {@inheritdoc}
     */
    public function getParameterBag()
    {
        if (null === $this-&gt;parameterBag) {
            $this-&gt;parameterBag = new FrozenParameterBag($this-&gt;parameters);
        }

        return $this-&gt;parameterBag;
    }

    /**
     * Gets the default parameters.
     *
     * @return array An array of the default parameters
     */
    protected function getDefaultParameters()
    {
        return array(
            'kernel.root_dir' =&gt; $this-&gt;targetDirs[2],
            'kernel.environment' =&gt; 'dev',
</codefragment>
  </duplication>
  <duplication lines="68" tokens="192">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="3681"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="3702"/>
    <codefragment>            'database_host' =&gt; '127.0.0.1',
            'database_port' =&gt; NULL,
            'database_name' =&gt; 'learn',
            'database_user' =&gt; 'root',
            'database_password' =&gt; 'qwe123',
            'mailer_transport' =&gt; 'smtp',
            'mailer_host' =&gt; '127.0.0.1',
            'mailer_user' =&gt; NULL,
            'mailer_password' =&gt; NULL,
            'secret' =&gt; '3805ce3ad1210248dc8a2f924963f548e502cdb6',
            'locale' =&gt; 'ru',
            'controller_resolver.class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Controller\\ControllerResolver',
            'controller_name_converter.class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Controller\\ControllerNameParser',
            'response_listener.class' =&gt; 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener',
            'streamed_response_listener.class' =&gt; 'Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener',
            'locale_listener.class' =&gt; 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener',
            'event_dispatcher.class' =&gt; 'Symfony\\Component\\EventDispatcher\\ContainerAwareEventDispatcher',
            'http_kernel.class' =&gt; 'Symfony\\Component\\HttpKernel\\DependencyInjection\\ContainerAwareHttpKernel',
            'filesystem.class' =&gt; 'Symfony\\Component\\Filesystem\\Filesystem',
            'cache_warmer.class' =&gt; 'Symfony\\Component\\HttpKernel\\CacheWarmer\\CacheWarmerAggregate',
            'cache_clearer.class' =&gt; 'Symfony\\Component\\HttpKernel\\CacheClearer\\ChainCacheClearer',
            'file_locator.class' =&gt; 'Symfony\\Component\\HttpKernel\\Config\\FileLocator',
            'uri_signer.class' =&gt; 'Symfony\\Component\\HttpKernel\\UriSigner',
            'request_stack.class' =&gt; 'Symfony\\Component\\HttpFoundation\\RequestStack',
            'fragment.handler.class' =&gt; 'Symfony\\Component\\HttpKernel\\DependencyInjection\\LazyLoadingFragmentHandler',
            'fragment.renderer.inline.class' =&gt; 'Symfony\\Component\\HttpKernel\\Fragment\\InlineFragmentRenderer',
            'fragment.renderer.hinclude.class' =&gt; 'Symfony\\Component\\HttpKernel\\Fragment\\HIncludeFragmentRenderer',
            'fragment.renderer.hinclude.global_template' =&gt; NULL,
            'fragment.renderer.esi.class' =&gt; 'Symfony\\Component\\HttpKernel\\Fragment\\EsiFragmentRenderer',
            'fragment.path' =&gt; '/_fragment',
            'translator.class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Translation\\Translator',
            'translator.identity.class' =&gt; 'Symfony\\Component\\Translation\\IdentityTranslator',
            'translator.selector.class' =&gt; 'Symfony\\Component\\Translation\\MessageSelector',
            'translation.loader.php.class' =&gt; 'Symfony\\Component\\Translation\\Loader\\PhpFileLoader',
            'translation.loader.yml.class' =&gt; 'Symfony\\Component\\Translation\\Loader\\YamlFileLoader',
            'translation.loader.xliff.class' =&gt; 'Symfony\\Component\\Translation\\Loader\\XliffFileLoader',
            'translation.loader.po.class' =&gt; 'Symfony\\Component\\Translation\\Loader\\PoFileLoader',
            'translation.loader.mo.class' =&gt; 'Symfony\\Component\\Translation\\Loader\\MoFileLoader',
            'translation.loader.qt.class' =&gt; 'Symfony\\Component\\Translation\\Loader\\QtFileLoader',
            'translation.loader.csv.class' =&gt; 'Symfony\\Component\\Translation\\Loader\\CsvFileLoader',
            'translation.loader.res.class' =&gt; 'Symfony\\Component\\Translation\\Loader\\IcuResFileLoader',
            'translation.loader.dat.class' =&gt; 'Symfony\\Component\\Translation\\Loader\\IcuDatFileLoader',
            'translation.loader.ini.class' =&gt; 'Symfony\\Component\\Translation\\Loader\\IniFileLoader',
            'translation.loader.json.class' =&gt; 'Symfony\\Component\\Translation\\Loader\\JsonFileLoader',
            'translation.dumper.php.class' =&gt; 'Symfony\\Component\\Translation\\Dumper\\PhpFileDumper',
            'translation.dumper.xliff.class' =&gt; 'Symfony\\Component\\Translation\\Dumper\\XliffFileDumper',
            'translation.dumper.po.class' =&gt; 'Symfony\\Component\\Translation\\Dumper\\PoFileDumper',
            'translation.dumper.mo.class' =&gt; 'Symfony\\Component\\Translation\\Dumper\\MoFileDumper',
            'translation.dumper.yml.class' =&gt; 'Symfony\\Component\\Translation\\Dumper\\YamlFileDumper',
            'translation.dumper.qt.class' =&gt; 'Symfony\\Component\\Translation\\Dumper\\QtFileDumper',
            'translation.dumper.csv.class' =&gt; 'Symfony\\Component\\Translation\\Dumper\\CsvFileDumper',
            'translation.dumper.ini.class' =&gt; 'Symfony\\Component\\Translation\\Dumper\\IniFileDumper',
            'translation.dumper.json.class' =&gt; 'Symfony\\Component\\Translation\\Dumper\\JsonFileDumper',
            'translation.dumper.res.class' =&gt; 'Symfony\\Component\\Translation\\Dumper\\IcuResFileDumper',
            'translation.extractor.php.class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Translation\\PhpExtractor',
            'translation.loader.class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Translation\\TranslationLoader',
            'translation.extractor.class' =&gt; 'Symfony\\Component\\Translation\\Extractor\\ChainExtractor',
            'translation.writer.class' =&gt; 'Symfony\\Component\\Translation\\Writer\\TranslationWriter',
            'property_accessor.class' =&gt; 'Symfony\\Component\\PropertyAccess\\PropertyAccessor',
            'kernel.secret' =&gt; '3805ce3ad1210248dc8a2f924963f548e502cdb6',
            'kernel.http_method_override' =&gt; true,
            'kernel.trusted_hosts' =&gt; array(

            ),
            'kernel.trusted_proxies' =&gt; array(

            ),
            'kernel.default_locale' =&gt; 'ru',
</codefragment>
  </duplication>
  <duplication lines="92" tokens="272">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="3749"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="3777"/>
    <codefragment>            'session.class' =&gt; 'Symfony\\Component\\HttpFoundation\\Session\\Session',
            'session.flashbag.class' =&gt; 'Symfony\\Component\\HttpFoundation\\Session\\Flash\\FlashBag',
            'session.attribute_bag.class' =&gt; 'Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag',
            'session.storage.metadata_bag.class' =&gt; 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\MetadataBag',
            'session.metadata.storage_key' =&gt; '_sf2_meta',
            'session.storage.native.class' =&gt; 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\NativeSessionStorage',
            'session.storage.php_bridge.class' =&gt; 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\PhpBridgeSessionStorage',
            'session.storage.mock_file.class' =&gt; 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\MockFileSessionStorage',
            'session.handler.native_file.class' =&gt; 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\NativeFileSessionHandler',
            'session.handler.write_check.class' =&gt; 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\WriteCheckSessionHandler',
            'session_listener.class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SessionListener',
            'session.storage.options' =&gt; array(
                'cookie_httponly' =&gt; true,
                'gc_probability' =&gt; 1,
            ),
            'session.save_path' =&gt; (__DIR__.'/sessions'),
            'session.metadata.update_threshold' =&gt; '0',
            'security.secure_random.class' =&gt; 'Symfony\\Component\\Security\\Core\\Util\\SecureRandom',
            'form.resolved_type_factory.class' =&gt; 'Symfony\\Component\\Form\\ResolvedFormTypeFactory',
            'form.registry.class' =&gt; 'Symfony\\Component\\Form\\FormRegistry',
            'form.factory.class' =&gt; 'Symfony\\Component\\Form\\FormFactory',
            'form.extension.class' =&gt; 'Symfony\\Component\\Form\\Extension\\DependencyInjection\\DependencyInjectionExtension',
            'form.type_guesser.validator.class' =&gt; 'Symfony\\Component\\Form\\Extension\\Validator\\ValidatorTypeGuesser',
            'form.type_extension.form.request_handler.class' =&gt; 'Symfony\\Component\\Form\\Extension\\HttpFoundation\\HttpFoundationRequestHandler',
            'form.type_extension.csrf.enabled' =&gt; true,
            'form.type_extension.csrf.field_name' =&gt; '_token',
            'security.csrf.token_generator.class' =&gt; 'Symfony\\Component\\Security\\Csrf\\TokenGenerator\\UriSafeTokenGenerator',
            'security.csrf.token_storage.class' =&gt; 'Symfony\\Component\\Security\\Csrf\\TokenStorage\\SessionTokenStorage',
            'security.csrf.token_manager.class' =&gt; 'Symfony\\Component\\Security\\Csrf\\CsrfTokenManager',
            'templating.engine.delegating.class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Templating\\DelegatingEngine',
            'templating.name_parser.class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Templating\\TemplateNameParser',
            'templating.filename_parser.class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Templating\\TemplateFilenameParser',
            'templating.cache_warmer.template_paths.class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\CacheWarmer\\TemplatePathsCacheWarmer',
            'templating.locator.class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Loader\\TemplateLocator',
            'templating.loader.filesystem.class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Loader\\FilesystemLoader',
            'templating.loader.cache.class' =&gt; 'Symfony\\Component\\Templating\\Loader\\CacheLoader',
            'templating.loader.chain.class' =&gt; 'Symfony\\Component\\Templating\\Loader\\ChainLoader',
            'templating.finder.class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\CacheWarmer\\TemplateFinder',
            'templating.helper.assets.class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\AssetsHelper',
            'templating.helper.router.class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\RouterHelper',
            'templating.helper.code.file_link_format' =&gt; NULL,
            'templating.loader.cache.path' =&gt; NULL,
            'templating.engines' =&gt; array(
                0 =&gt; 'twig',
            ),
            'validator.class' =&gt; 'Symfony\\Component\\Validator\\Validator\\ValidatorInterface',
            'validator.builder.class' =&gt; 'Symfony\\Component\\Validator\\ValidatorBuilderInterface',
            'validator.builder.factory.class' =&gt; 'Symfony\\Component\\Validator\\Validation',
            'validator.mapping.cache.apc.class' =&gt; 'Symfony\\Component\\Validator\\Mapping\\Cache\\ApcCache',
            'validator.mapping.cache.prefix' =&gt; '',
            'validator.validator_factory.class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Validator\\ConstraintValidatorFactory',
            'validator.expression.class' =&gt; 'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator',
            'validator.email.class' =&gt; 'Symfony\\Component\\Validator\\Constraints\\EmailValidator',
            'validator.translation_domain' =&gt; 'validators',
            'validator.api' =&gt; '2.5-bc',
            'fragment.listener.class' =&gt; 'Symfony\\Component\\HttpKernel\\EventListener\\FragmentListener',
            'translator.logging' =&gt; true,
            'profiler.class' =&gt; 'Symfony\\Component\\HttpKernel\\Profiler\\Profiler',
            'profiler_listener.class' =&gt; 'Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener',
            'data_collector.config.class' =&gt; 'Symfony\\Component\\HttpKernel\\DataCollector\\ConfigDataCollector',
            'data_collector.request.class' =&gt; 'Symfony\\Component\\HttpKernel\\DataCollector\\RequestDataCollector',
            'data_collector.exception.class' =&gt; 'Symfony\\Component\\HttpKernel\\DataCollector\\ExceptionDataCollector',
            'data_collector.events.class' =&gt; 'Symfony\\Component\\HttpKernel\\DataCollector\\EventDataCollector',
            'data_collector.logger.class' =&gt; 'Symfony\\Component\\HttpKernel\\DataCollector\\LoggerDataCollector',
            'data_collector.time.class' =&gt; 'Symfony\\Component\\HttpKernel\\DataCollector\\TimeDataCollector',
            'data_collector.memory.class' =&gt; 'Symfony\\Component\\HttpKernel\\DataCollector\\MemoryDataCollector',
            'data_collector.router.class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RouterDataCollector',
            'form.resolved_type_factory.data_collector_proxy.class' =&gt; 'Symfony\\Component\\Form\\Extension\\DataCollector\\Proxy\\ResolvedTypeFactoryDataCollectorProxy',
            'form.type_extension.form.data_collector.class' =&gt; 'Symfony\\Component\\Form\\Extension\\DataCollector\\Type\\DataCollectorTypeExtension',
            'data_collector.form.class' =&gt; 'Symfony\\Component\\Form\\Extension\\DataCollector\\FormDataCollector',
            'data_collector.form.extractor.class' =&gt; 'Symfony\\Component\\Form\\Extension\\DataCollector\\FormDataExtractor',
            'profiler_listener.only_exceptions' =&gt; false,
            'profiler_listener.only_master_requests' =&gt; false,
            'profiler.storage.dsn' =&gt; ('file:'.__DIR__.'/profiler'),
            'profiler.storage.username' =&gt; '',
            'profiler.storage.password' =&gt; '',
            'profiler.storage.lifetime' =&gt; 86400,
            'router.class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Routing\\Router',
            'router.request_context.class' =&gt; 'Symfony\\Component\\Routing\\RequestContext',
            'routing.loader.class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Routing\\DelegatingLoader',
            'routing.resolver.class' =&gt; 'Symfony\\Component\\Config\\Loader\\LoaderResolver',
            'routing.loader.xml.class' =&gt; 'Symfony\\Component\\Routing\\Loader\\XmlFileLoader',
            'routing.loader.yml.class' =&gt; 'Symfony\\Component\\Routing\\Loader\\YamlFileLoader',
            'routing.loader.php.class' =&gt; 'Symfony\\Component\\Routing\\Loader\\PhpFileLoader',
            'router.options.generator_class' =&gt; 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
            'router.options.generator_base_class' =&gt; 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
            'router.options.generator_dumper_class' =&gt; 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper',
            'router.options.matcher_class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher',
            'router.options.matcher_base_class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher',
            'router.options.matcher_dumper_class' =&gt; 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper',
            'router.cache_warmer.class' =&gt; 'Symfony\\Bundle\\FrameworkBundle\\CacheWarmer\\RouterCacheWarmer',
            'router.options.matcher.cache_class' =&gt; 'appDevUrlMatcher',
</codefragment>
  </duplication>
  <duplication lines="176" tokens="497">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="3858"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="3886"/>
    <codefragment>            'debug.controller_resolver.class' =&gt; 'Symfony\\Component\\HttpKernel\\Controller\\TraceableControllerResolver',
            'security.context.class' =&gt; 'Symfony\\Component\\Security\\Core\\SecurityContext',
            'security.user_checker.class' =&gt; 'Symfony\\Component\\Security\\Core\\User\\UserChecker',
            'security.encoder_factory.generic.class' =&gt; 'Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactory',
            'security.encoder.digest.class' =&gt; 'Symfony\\Component\\Security\\Core\\Encoder\\MessageDigestPasswordEncoder',
            'security.encoder.plain.class' =&gt; 'Symfony\\Component\\Security\\Core\\Encoder\\PlaintextPasswordEncoder',
            'security.encoder.pbkdf2.class' =&gt; 'Symfony\\Component\\Security\\Core\\Encoder\\Pbkdf2PasswordEncoder',
            'security.encoder.bcrypt.class' =&gt; 'Symfony\\Component\\Security\\Core\\Encoder\\BCryptPasswordEncoder',
            'security.user.provider.in_memory.class' =&gt; 'Symfony\\Component\\Security\\Core\\User\\InMemoryUserProvider',
            'security.user.provider.in_memory.user.class' =&gt; 'Symfony\\Component\\Security\\Core\\User\\User',
            'security.user.provider.chain.class' =&gt; 'Symfony\\Component\\Security\\Core\\User\\ChainUserProvider',
            'security.authentication.trust_resolver.class' =&gt; 'Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationTrustResolver',
            'security.authentication.trust_resolver.anonymous_class' =&gt; 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken',
            'security.authentication.trust_resolver.rememberme_class' =&gt; 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken',
            'security.authentication.manager.class' =&gt; 'Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationProviderManager',
            'security.authentication.session_strategy.class' =&gt; 'Symfony\\Component\\Security\\Http\\Session\\SessionAuthenticationStrategy',
            'security.access.decision_manager.class' =&gt; 'Symfony\\Component\\Security\\Core\\Authorization\\AccessDecisionManager',
            'security.access.simple_role_voter.class' =&gt; 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\RoleVoter',
            'security.access.authenticated_voter.class' =&gt; 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\AuthenticatedVoter',
            'security.access.role_hierarchy_voter.class' =&gt; 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\RoleHierarchyVoter',
            'security.access.expression_voter.class' =&gt; 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\ExpressionVoter',
            'security.firewall.class' =&gt; 'Symfony\\Component\\Security\\Http\\Firewall',
            'security.firewall.map.class' =&gt; 'Symfony\\Bundle\\SecurityBundle\\Security\\FirewallMap',
            'security.firewall.context.class' =&gt; 'Symfony\\Bundle\\SecurityBundle\\Security\\FirewallContext',
            'security.matcher.class' =&gt; 'Symfony\\Component\\HttpFoundation\\RequestMatcher',
            'security.expression_matcher.class' =&gt; 'Symfony\\Component\\HttpFoundation\\ExpressionRequestMatcher',
            'security.role_hierarchy.class' =&gt; 'Symfony\\Component\\Security\\Core\\Role\\RoleHierarchy',
            'security.http_utils.class' =&gt; 'Symfony\\Component\\Security\\Http\\HttpUtils',
            'security.validator.user_password.class' =&gt; 'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator',
            'security.expression_language.class' =&gt; 'Symfony\\Component\\Security\\Core\\Authorization\\ExpressionLanguage',
            'security.role_hierarchy.roles' =&gt; array(

            ),
            'security.authentication.retry_entry_point.class' =&gt; 'Symfony\\Component\\Security\\Http\\EntryPoint\\RetryAuthenticationEntryPoint',
            'security.channel_listener.class' =&gt; 'Symfony\\Component\\Security\\Http\\Firewall\\ChannelListener',
            'security.authentication.form_entry_point.class' =&gt; 'Symfony\\Component\\Security\\Http\\EntryPoint\\FormAuthenticationEntryPoint',
            'security.authentication.listener.form.class' =&gt; 'Symfony\\Component\\Security\\Http\\Firewall\\UsernamePasswordFormAuthenticationListener',
            'security.authentication.listener.simple_form.class' =&gt; 'Symfony\\Component\\Security\\Http\\Firewall\\SimpleFormAuthenticationListener',
            'security.authentication.listener.simple_preauth.class' =&gt; 'Symfony\\Component\\Security\\Http\\Firewall\\SimplePreAuthenticationListener',
            'security.authentication.listener.basic.class' =&gt; 'Symfony\\Component\\Security\\Http\\Firewall\\BasicAuthenticationListener',
            'security.authentication.basic_entry_point.class' =&gt; 'Symfony\\Component\\Security\\Http\\EntryPoint\\BasicAuthenticationEntryPoint',
            'security.authentication.listener.digest.class' =&gt; 'Symfony\\Component\\Security\\Http\\Firewall\\DigestAuthenticationListener',
            'security.authentication.digest_entry_point.class' =&gt; 'Symfony\\Component\\Security\\Http\\EntryPoint\\DigestAuthenticationEntryPoint',
            'security.authentication.listener.x509.class' =&gt; 'Symfony\\Component\\Security\\Http\\Firewall\\X509AuthenticationListener',
            'security.authentication.listener.anonymous.class' =&gt; 'Symfony\\Component\\Security\\Http\\Firewall\\AnonymousAuthenticationListener',
            'security.authentication.switchuser_listener.class' =&gt; 'Symfony\\Component\\Security\\Http\\Firewall\\SwitchUserListener',
            'security.logout_listener.class' =&gt; 'Symfony\\Component\\Security\\Http\\Firewall\\LogoutListener',
            'security.logout.handler.session.class' =&gt; 'Symfony\\Component\\Security\\Http\\Logout\\SessionLogoutHandler',
            'security.logout.handler.cookie_clearing.class' =&gt; 'Symfony\\Component\\Security\\Http\\Logout\\CookieClearingLogoutHandler',
            'security.logout.success_handler.class' =&gt; 'Symfony\\Component\\Security\\Http\\Logout\\DefaultLogoutSuccessHandler',
            'security.access_listener.class' =&gt; 'Symfony\\Component\\Security\\Http\\Firewall\\AccessListener',
            'security.access_map.class' =&gt; 'Symfony\\Component\\Security\\Http\\AccessMap',
            'security.exception_listener.class' =&gt; 'Symfony\\Component\\Security\\Http\\Firewall\\ExceptionListener',
            'security.context_listener.class' =&gt; 'Symfony\\Component\\Security\\Http\\Firewall\\ContextListener',
            'security.authentication.provider.dao.class' =&gt; 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\DaoAuthenticationProvider',
            'security.authentication.provider.simple.class' =&gt; 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\SimpleAuthenticationProvider',
            'security.authentication.provider.pre_authenticated.class' =&gt; 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\PreAuthenticatedAuthenticationProvider',
            'security.authentication.provider.anonymous.class' =&gt; 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\AnonymousAuthenticationProvider',
            'security.authentication.success_handler.class' =&gt; 'Symfony\\Component\\Security\\Http\\Authentication\\DefaultAuthenticationSuccessHandler',
            'security.authentication.failure_handler.class' =&gt; 'Symfony\\Component\\Security\\Http\\Authentication\\DefaultAuthenticationFailureHandler',
            'security.authentication.simple_success_failure_handler.class' =&gt; 'Symfony\\Component\\Security\\Http\\Authentication\\SimpleAuthenticationHandler',
            'security.authentication.provider.rememberme.class' =&gt; 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\RememberMeAuthenticationProvider',
            'security.authentication.listener.rememberme.class' =&gt; 'Symfony\\Component\\Security\\Http\\Firewall\\RememberMeListener',
            'security.rememberme.token.provider.in_memory.class' =&gt; 'Symfony\\Component\\Security\\Core\\Authentication\\RememberMe\\InMemoryTokenProvider',
            'security.authentication.rememberme.services.persistent.class' =&gt; 'Symfony\\Component\\Security\\Http\\RememberMe\\PersistentTokenBasedRememberMeServices',
            'security.authentication.rememberme.services.simplehash.class' =&gt; 'Symfony\\Component\\Security\\Http\\RememberMe\\TokenBasedRememberMeServices',
            'security.rememberme.response_listener.class' =&gt; 'Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener',
            'templating.helper.logout_url.class' =&gt; 'Symfony\\Bundle\\SecurityBundle\\Templating\\Helper\\LogoutUrlHelper',
            'templating.helper.security.class' =&gt; 'Symfony\\Bundle\\SecurityBundle\\Templating\\Helper\\SecurityHelper',
            'twig.extension.logout_url.class' =&gt; 'Symfony\\Bridge\\Twig\\Extension\\LogoutUrlExtension',
            'twig.extension.security.class' =&gt; 'Symfony\\Bridge\\Twig\\Extension\\SecurityExtension',
            'data_collector.security.class' =&gt; 'Symfony\\Bundle\\SecurityBundle\\DataCollector\\SecurityDataCollector',
            'security.access.denied_url' =&gt; NULL,
            'security.authentication.manager.erase_credentials' =&gt; true,
            'security.authentication.session_strategy.strategy' =&gt; 'migrate',
            'security.access.always_authenticate_before_granting' =&gt; false,
            'security.authentication.hide_user_not_found' =&gt; true,
            'twig.class' =&gt; 'Twig_Environment',
            'twig.loader.filesystem.class' =&gt; 'Symfony\\Bundle\\TwigBundle\\Loader\\FilesystemLoader',
            'twig.loader.chain.class' =&gt; 'Twig_Loader_Chain',
            'templating.engine.twig.class' =&gt; 'Symfony\\Bundle\\TwigBundle\\TwigEngine',
            'twig.cache_warmer.class' =&gt; 'Symfony\\Bundle\\TwigBundle\\CacheWarmer\\TemplateCacheCacheWarmer',
            'twig.extension.trans.class' =&gt; 'Symfony\\Bridge\\Twig\\Extension\\TranslationExtension',
            'twig.extension.actions.class' =&gt; 'Symfony\\Bundle\\TwigBundle\\Extension\\ActionsExtension',
            'twig.extension.code.class' =&gt; 'Symfony\\Bridge\\Twig\\Extension\\CodeExtension',
            'twig.extension.routing.class' =&gt; 'Symfony\\Bridge\\Twig\\Extension\\RoutingExtension',
            'twig.extension.yaml.class' =&gt; 'Symfony\\Bridge\\Twig\\Extension\\YamlExtension',
            'twig.extension.form.class' =&gt; 'Symfony\\Bridge\\Twig\\Extension\\FormExtension',
            'twig.extension.httpkernel.class' =&gt; 'Symfony\\Bridge\\Twig\\Extension\\HttpKernelExtension',
            'twig.extension.debug.stopwatch.class' =&gt; 'Symfony\\Bridge\\Twig\\Extension\\StopwatchExtension',
            'twig.extension.expression.class' =&gt; 'Symfony\\Bridge\\Twig\\Extension\\ExpressionExtension',
            'twig.form.engine.class' =&gt; 'Symfony\\Bridge\\Twig\\Form\\TwigRendererEngine',
            'twig.form.renderer.class' =&gt; 'Symfony\\Bridge\\Twig\\Form\\TwigRenderer',
            'twig.translation.extractor.class' =&gt; 'Symfony\\Bridge\\Twig\\Translation\\TwigExtractor',
            'twig.exception_listener.class' =&gt; 'Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener',
            'twig.controller.exception.class' =&gt; 'Symfony\\Bundle\\TwigBundle\\Controller\\ExceptionController',
            'twig.controller.preview_error.class' =&gt; 'Symfony\\Bundle\\TwigBundle\\Controller\\PreviewErrorController',
            'twig.exception_listener.controller' =&gt; 'twig.controller.exception:showAction',
            'twig.form.resources' =&gt; array(
                0 =&gt; 'form_div_layout.html.twig',
            ),
            'monolog.logger.class' =&gt; 'Symfony\\Bridge\\Monolog\\Logger',
            'monolog.gelf.publisher.class' =&gt; 'Gelf\\MessagePublisher',
            'monolog.gelfphp.publisher.class' =&gt; 'Gelf\\Publisher',
            'monolog.handler.stream.class' =&gt; 'Monolog\\Handler\\StreamHandler',
            'monolog.handler.console.class' =&gt; 'Symfony\\Bridge\\Monolog\\Handler\\ConsoleHandler',
            'monolog.handler.group.class' =&gt; 'Monolog\\Handler\\GroupHandler',
            'monolog.handler.buffer.class' =&gt; 'Monolog\\Handler\\BufferHandler',
            'monolog.handler.rotating_file.class' =&gt; 'Monolog\\Handler\\RotatingFileHandler',
            'monolog.handler.syslog.class' =&gt; 'Monolog\\Handler\\SyslogHandler',
            'monolog.handler.syslogudp.class' =&gt; 'Monolog\\Handler\\SyslogUdpHandler',
            'monolog.handler.null.class' =&gt; 'Monolog\\Handler\\NullHandler',
            'monolog.handler.test.class' =&gt; 'Monolog\\Handler\\TestHandler',
            'monolog.handler.gelf.class' =&gt; 'Monolog\\Handler\\GelfHandler',
            'monolog.handler.rollbar.class' =&gt; 'Monolog\\Handler\\RollbarHandler',
            'monolog.handler.flowdock.class' =&gt; 'Monolog\\Handler\\FlowdockHandler',
            'monolog.handler.browser_console.class' =&gt; 'Monolog\\Handler\\BrowserConsoleHandler',
            'monolog.handler.firephp.class' =&gt; 'Symfony\\Bridge\\Monolog\\Handler\\FirePHPHandler',
            'monolog.handler.chromephp.class' =&gt; 'Symfony\\Bridge\\Monolog\\Handler\\ChromePhpHandler',
            'monolog.handler.debug.class' =&gt; 'Symfony\\Bridge\\Monolog\\Handler\\DebugHandler',
            'monolog.handler.swift_mailer.class' =&gt; 'Symfony\\Bridge\\Monolog\\Handler\\SwiftMailerHandler',
            'monolog.handler.native_mailer.class' =&gt; 'Monolog\\Handler\\NativeMailerHandler',
            'monolog.handler.socket.class' =&gt; 'Monolog\\Handler\\SocketHandler',
            'monolog.handler.pushover.class' =&gt; 'Monolog\\Handler\\PushoverHandler',
            'monolog.handler.raven.class' =&gt; 'Monolog\\Handler\\RavenHandler',
            'monolog.handler.newrelic.class' =&gt; 'Monolog\\Handler\\NewRelicHandler',
            'monolog.handler.hipchat.class' =&gt; 'Monolog\\Handler\\HipChatHandler',
            'monolog.handler.slack.class' =&gt; 'Monolog\\Handler\\SlackHandler',
            'monolog.handler.cube.class' =&gt; 'Monolog\\Handler\\CubeHandler',
            'monolog.handler.amqp.class' =&gt; 'Monolog\\Handler\\AmqpHandler',
            'monolog.handler.error_log.class' =&gt; 'Monolog\\Handler\\ErrorLogHandler',
            'monolog.handler.loggly.class' =&gt; 'Monolog\\Handler\\LogglyHandler',
            'monolog.handler.logentries.class' =&gt; 'Monolog\\Handler\\LogEntriesHandler',
            'monolog.handler.whatfailuregroup.class' =&gt; 'Monolog\\Handler\\WhatFailureGroupHandler',
            'monolog.activation_strategy.not_found.class' =&gt; 'Symfony\\Bundle\\MonologBundle\\NotFoundActivationStrategy',
            'monolog.handler.fingers_crossed.class' =&gt; 'Monolog\\Handler\\FingersCrossedHandler',
            'monolog.handler.fingers_crossed.error_level_activation_strategy.class' =&gt; 'Monolog\\Handler\\FingersCrossed\\ErrorLevelActivationStrategy',
            'monolog.handler.filter.class' =&gt; 'Monolog\\Handler\\FilterHandler',
            'monolog.handler.mongo.class' =&gt; 'Monolog\\Handler\\MongoDBHandler',
            'monolog.mongo.client.class' =&gt; 'MongoClient',
            'monolog.handler.elasticsearch.class' =&gt; 'Monolog\\Handler\\ElasticSearchHandler',
            'monolog.elastica.client.class' =&gt; 'Elastica\\Client',
            'monolog.swift_mailer.handlers' =&gt; array(

            ),
            'monolog.handlers_to_channels' =&gt; array(
                'monolog.handler.console_very_verbose' =&gt; array(
                    'type' =&gt; 'inclusive',
                    'elements' =&gt; array(
                        0 =&gt; 'doctrine',
                    ),
                ),
                'monolog.handler.console' =&gt; array(
                    'type' =&gt; 'exclusive',
                    'elements' =&gt; array(
                        0 =&gt; 'doctrine',
                    ),
                ),
                'monolog.handler.main' =&gt; NULL,
            ),
            'swiftmailer.class' =&gt; 'Swift_Mailer',
            'swiftmailer.transport.sendmail.class' =&gt; 'Swift_Transport_SendmailTransport',
            'swiftmailer.transport.mail.class' =&gt; 'Swift_Transport_MailTransport',
            'swiftmailer.transport.failover.class' =&gt; 'Swift_Transport_FailoverTransport',
            'swiftmailer.plugin.redirecting.class' =&gt; 'Swift_Plugins_RedirectingPlugin',
            'swiftmailer.plugin.impersonate.class' =&gt; 'Swift_Plugins_ImpersonatePlugin',
            'swiftmailer.plugin.messagelogger.class' =&gt; 'Swift_Plugins_MessageLogger',
            'swiftmailer.plugin.antiflood.class' =&gt; 'Swift_Plugins_AntiFloodPlugin',
            'swiftmailer.transport.smtp.class' =&gt; 'Swift_Transport_EsmtpTransport',
            'swiftmailer.plugin.blackhole.class' =&gt; 'Swift_Plugins_BlackholePlugin',
            'swiftmailer.spool.file.class' =&gt; 'Swift_FileSpool',
            'swiftmailer.spool.memory.class' =&gt; 'Swift_MemorySpool',
            'swiftmailer.email_sender.listener.class' =&gt; 'Symfony\\Bundle\\SwiftmailerBundle\\EventListener\\EmailSenderListener',
            'swiftmailer.data_collector.class' =&gt; 'Symfony\\Bundle\\SwiftmailerBundle\\DataCollector\\MessageDataCollector',
            'swiftmailer.mailer.default.transport.name' =&gt; 'smtp',
            'swiftmailer.mailer.default.delivery.enabled' =&gt; true,
</codefragment>
  </duplication>
  <duplication lines="186" tokens="532">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="4048"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="4076"/>
    <codefragment>            'swiftmailer.single_address' =&gt; NULL,
            'swiftmailer.mailers' =&gt; array(
                'default' =&gt; 'swiftmailer.mailer.default',
            ),
            'swiftmailer.default_mailer' =&gt; 'default',
            'doctrine_cache.apc.class' =&gt; 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine_cache.array.class' =&gt; 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine_cache.chain.class' =&gt; 'Doctrine\\Common\\Cache\\ChainCache',
            'doctrine_cache.couchbase.class' =&gt; 'Doctrine\\Common\\Cache\\CouchbaseCache',
            'doctrine_cache.couchbase.connection.class' =&gt; 'Couchbase',
            'doctrine_cache.couchbase.hostnames' =&gt; 'localhost:8091',
            'doctrine_cache.file_system.class' =&gt; 'Doctrine\\Common\\Cache\\FilesystemCache',
            'doctrine_cache.php_file.class' =&gt; 'Doctrine\\Common\\Cache\\PhpFileCache',
            'doctrine_cache.memcache.class' =&gt; 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine_cache.memcache.connection.class' =&gt; 'Memcache',
            'doctrine_cache.memcache.host' =&gt; 'localhost',
            'doctrine_cache.memcache.port' =&gt; 11211,
            'doctrine_cache.memcached.class' =&gt; 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine_cache.memcached.connection.class' =&gt; 'Memcached',
            'doctrine_cache.memcached.host' =&gt; 'localhost',
            'doctrine_cache.memcached.port' =&gt; 11211,
            'doctrine_cache.mongodb.class' =&gt; 'Doctrine\\Common\\Cache\\MongoDBCache',
            'doctrine_cache.mongodb.collection.class' =&gt; 'MongoCollection',
            'doctrine_cache.mongodb.connection.class' =&gt; 'MongoClient',
            'doctrine_cache.mongodb.server' =&gt; 'localhost:27017',
            'doctrine_cache.redis.class' =&gt; 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine_cache.redis.connection.class' =&gt; 'Redis',
            'doctrine_cache.redis.host' =&gt; 'localhost',
            'doctrine_cache.redis.port' =&gt; 6379,
            'doctrine_cache.riak.class' =&gt; 'Doctrine\\Common\\Cache\\RiakCache',
            'doctrine_cache.riak.bucket.class' =&gt; 'Riak\\Bucket',
            'doctrine_cache.riak.connection.class' =&gt; 'Riak\\Connection',
            'doctrine_cache.riak.bucket_property_list.class' =&gt; 'Riak\\BucketPropertyList',
            'doctrine_cache.riak.host' =&gt; 'localhost',
            'doctrine_cache.riak.port' =&gt; 8087,
            'doctrine_cache.sqlite3.class' =&gt; 'Doctrine\\Common\\Cache\\SQLite3Cache',
            'doctrine_cache.sqlite3.connection.class' =&gt; 'SQLite3',
            'doctrine_cache.void.class' =&gt; 'Doctrine\\Common\\Cache\\VoidCache',
            'doctrine_cache.wincache.class' =&gt; 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine_cache.xcache.class' =&gt; 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine_cache.zenddata.class' =&gt; 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine_cache.security.acl.cache.class' =&gt; 'Doctrine\\Bundle\\DoctrineCacheBundle\\Acl\\Model\\AclCache',
            'doctrine.dbal.logger.chain.class' =&gt; 'Doctrine\\DBAL\\Logging\\LoggerChain',
            'doctrine.dbal.logger.profiling.class' =&gt; 'Doctrine\\DBAL\\Logging\\DebugStack',
            'doctrine.dbal.logger.class' =&gt; 'Symfony\\Bridge\\Doctrine\\Logger\\DbalLogger',
            'doctrine.dbal.configuration.class' =&gt; 'Doctrine\\DBAL\\Configuration',
            'doctrine.data_collector.class' =&gt; 'Doctrine\\Bundle\\DoctrineBundle\\DataCollector\\DoctrineDataCollector',
            'doctrine.dbal.connection.event_manager.class' =&gt; 'Symfony\\Bridge\\Doctrine\\ContainerAwareEventManager',
            'doctrine.dbal.connection_factory.class' =&gt; 'Doctrine\\Bundle\\DoctrineBundle\\ConnectionFactory',
            'doctrine.dbal.events.mysql_session_init.class' =&gt; 'Doctrine\\DBAL\\Event\\Listeners\\MysqlSessionInit',
            'doctrine.dbal.events.oracle_session_init.class' =&gt; 'Doctrine\\DBAL\\Event\\Listeners\\OracleSessionInit',
            'doctrine.class' =&gt; 'Doctrine\\Bundle\\DoctrineBundle\\Registry',
            'doctrine.entity_managers' =&gt; array(
                'default' =&gt; 'doctrine.orm.default_entity_manager',
            ),
            'doctrine.default_entity_manager' =&gt; 'default',
            'doctrine.dbal.connection_factory.types' =&gt; array(

            ),
            'doctrine.connections' =&gt; array(
                'default' =&gt; 'doctrine.dbal.default_connection',
            ),
            'doctrine.default_connection' =&gt; 'default',
            'doctrine.orm.configuration.class' =&gt; 'Doctrine\\ORM\\Configuration',
            'doctrine.orm.entity_manager.class' =&gt; 'Doctrine\\ORM\\EntityManager',
            'doctrine.orm.manager_configurator.class' =&gt; 'Doctrine\\Bundle\\DoctrineBundle\\ManagerConfigurator',
            'doctrine.orm.cache.array.class' =&gt; 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine.orm.cache.apc.class' =&gt; 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine.orm.cache.memcache.class' =&gt; 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine.orm.cache.memcache_host' =&gt; 'localhost',
            'doctrine.orm.cache.memcache_port' =&gt; 11211,
            'doctrine.orm.cache.memcache_instance.class' =&gt; 'Memcache',
            'doctrine.orm.cache.memcached.class' =&gt; 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine.orm.cache.memcached_host' =&gt; 'localhost',
            'doctrine.orm.cache.memcached_port' =&gt; 11211,
            'doctrine.orm.cache.memcached_instance.class' =&gt; 'Memcached',
            'doctrine.orm.cache.redis.class' =&gt; 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine.orm.cache.redis_host' =&gt; 'localhost',
            'doctrine.orm.cache.redis_port' =&gt; 6379,
            'doctrine.orm.cache.redis_instance.class' =&gt; 'Redis',
            'doctrine.orm.cache.xcache.class' =&gt; 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine.orm.cache.wincache.class' =&gt; 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine.orm.cache.zenddata.class' =&gt; 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine.orm.metadata.driver_chain.class' =&gt; 'Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain',
            'doctrine.orm.metadata.annotation.class' =&gt; 'Doctrine\\ORM\\Mapping\\Driver\\AnnotationDriver',
            'doctrine.orm.metadata.xml.class' =&gt; 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedXmlDriver',
            'doctrine.orm.metadata.yml.class' =&gt; 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedYamlDriver',
            'doctrine.orm.metadata.php.class' =&gt; 'Doctrine\\ORM\\Mapping\\Driver\\PHPDriver',
            'doctrine.orm.metadata.staticphp.class' =&gt; 'Doctrine\\ORM\\Mapping\\Driver\\StaticPHPDriver',
            'doctrine.orm.proxy_cache_warmer.class' =&gt; 'Symfony\\Bridge\\Doctrine\\CacheWarmer\\ProxyCacheWarmer',
            'form.type_guesser.doctrine.class' =&gt; 'Symfony\\Bridge\\Doctrine\\Form\\DoctrineOrmTypeGuesser',
            'doctrine.orm.validator.unique.class' =&gt; 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator',
            'doctrine.orm.validator_initializer.class' =&gt; 'Symfony\\Bridge\\Doctrine\\Validator\\DoctrineInitializer',
            'doctrine.orm.security.user.provider.class' =&gt; 'Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider',
            'doctrine.orm.listeners.resolve_target_entity.class' =&gt; 'Doctrine\\ORM\\Tools\\ResolveTargetEntityListener',
            'doctrine.orm.listeners.attach_entity_listeners.class' =&gt; 'Doctrine\\ORM\\Tools\\AttachEntityListenersListener',
            'doctrine.orm.naming_strategy.default.class' =&gt; 'Doctrine\\ORM\\Mapping\\DefaultNamingStrategy',
            'doctrine.orm.naming_strategy.underscore.class' =&gt; 'Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy',
            'doctrine.orm.quote_strategy.default.class' =&gt; 'Doctrine\\ORM\\Mapping\\DefaultQuoteStrategy',
            'doctrine.orm.quote_strategy.ansi.class' =&gt; 'Doctrine\\ORM\\Mapping\\AnsiQuoteStrategy',
            'doctrine.orm.entity_listener_resolver.class' =&gt; 'Doctrine\\ORM\\Mapping\\DefaultEntityListenerResolver',
            'doctrine.orm.second_level_cache.default_cache_factory.class' =&gt; 'Doctrine\\ORM\\Cache\\DefaultCacheFactory',
            'doctrine.orm.second_level_cache.default_region.class' =&gt; 'Doctrine\\ORM\\Cache\\Region\\DefaultRegion',
            'doctrine.orm.second_level_cache.filelock_region.class' =&gt; 'Doctrine\\ORM\\Cache\\Region\\FileLockRegion',
            'doctrine.orm.second_level_cache.logger_chain.class' =&gt; 'Doctrine\\ORM\\Cache\\Logging\\CacheLoggerChain',
            'doctrine.orm.second_level_cache.logger_statistics.class' =&gt; 'Doctrine\\ORM\\Cache\\Logging\\StatisticsCacheLogger',
            'doctrine.orm.second_level_cache.cache_configuration.class' =&gt; 'Doctrine\\ORM\\Cache\\CacheConfiguration',
            'doctrine.orm.second_level_cache.regions_configuration.class' =&gt; 'Doctrine\\ORM\\Cache\\RegionsConfiguration',
            'doctrine.orm.auto_generate_proxy_classes' =&gt; true,
            'doctrine.orm.proxy_dir' =&gt; (__DIR__.'/doctrine/orm/Proxies'),
            'doctrine.orm.proxy_namespace' =&gt; 'Proxies',
            'sensio_framework_extra.view.guesser.class' =&gt; 'Sensio\\Bundle\\FrameworkExtraBundle\\Templating\\TemplateGuesser',
            'sensio_framework_extra.controller.listener.class' =&gt; 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener',
            'sensio_framework_extra.routing.loader.annot_dir.class' =&gt; 'Symfony\\Component\\Routing\\Loader\\AnnotationDirectoryLoader',
            'sensio_framework_extra.routing.loader.annot_file.class' =&gt; 'Symfony\\Component\\Routing\\Loader\\AnnotationFileLoader',
            'sensio_framework_extra.routing.loader.annot_class.class' =&gt; 'Sensio\\Bundle\\FrameworkExtraBundle\\Routing\\AnnotatedRouteControllerLoader',
            'sensio_framework_extra.converter.listener.class' =&gt; 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener',
            'sensio_framework_extra.converter.manager.class' =&gt; 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\ParamConverterManager',
            'sensio_framework_extra.converter.doctrine.class' =&gt; 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\DoctrineParamConverter',
            'sensio_framework_extra.converter.datetime.class' =&gt; 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\DateTimeParamConverter',
            'sensio_framework_extra.view.listener.class' =&gt; 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener',
            'assetic.asset_factory.class' =&gt; 'Symfony\\Bundle\\AsseticBundle\\Factory\\AssetFactory',
            'assetic.asset_manager.class' =&gt; 'Assetic\\Factory\\LazyAssetManager',
            'assetic.asset_manager_cache_warmer.class' =&gt; 'Symfony\\Bundle\\AsseticBundle\\CacheWarmer\\AssetManagerCacheWarmer',
            'assetic.cached_formula_loader.class' =&gt; 'Assetic\\Factory\\Loader\\CachedFormulaLoader',
            'assetic.config_cache.class' =&gt; 'Assetic\\Cache\\ConfigCache',
            'assetic.config_loader.class' =&gt; 'Symfony\\Bundle\\AsseticBundle\\Factory\\Loader\\ConfigurationLoader',
            'assetic.config_resource.class' =&gt; 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\ConfigurationResource',
            'assetic.coalescing_directory_resource.class' =&gt; 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\CoalescingDirectoryResource',
            'assetic.directory_resource.class' =&gt; 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\DirectoryResource',
            'assetic.filter_manager.class' =&gt; 'Symfony\\Bundle\\AsseticBundle\\FilterManager',
            'assetic.worker.ensure_filter.class' =&gt; 'Assetic\\Factory\\Worker\\EnsureFilterWorker',
            'assetic.worker.cache_busting.class' =&gt; 'Assetic\\Factory\\Worker\\CacheBustingWorker',
            'assetic.value_supplier.class' =&gt; 'Symfony\\Bundle\\AsseticBundle\\DefaultValueSupplier',
            'assetic.node.paths' =&gt; array(

            ),
            'assetic.cache_dir' =&gt; (__DIR__.'/assetic'),
            'assetic.bundles' =&gt; array(
                0 =&gt; 'FrameworkBundle',
                1 =&gt; 'SecurityBundle',
    2 =&gt; 'TwigBundle',
    3 =&gt; 'MonologBundle',
    4 =&gt; 'SwiftmailerBundle',
    5 =&gt; 'DoctrineBundle',
    6 =&gt; 'SensioFrameworkExtraBundle',
    7 =&gt; 'AsseticBundle',
    8 =&gt; 'AppBundle',
    9 =&gt; 'WordBundle',
    10 =&gt; 'DebugBundle',
    11 =&gt; 'WebProfilerBundle',
    12 =&gt; 'SensioDistributionBundle',
    13 =&gt; 'SensioGeneratorBundle',
            ),
            'assetic.twig_extension.class' =&gt; 'Symfony\\Bundle\\AsseticBundle\\Twig\\AsseticExtension',
            'assetic.twig_formula_loader.class' =&gt; 'Assetic\\Extension\\Twig\\TwigFormulaLoader',
            'assetic.helper.dynamic.class' =&gt; 'Symfony\\Bundle\\AsseticBundle\\Templating\\DynamicAsseticHelper',
            'assetic.helper.static.class' =&gt; 'Symfony\\Bundle\\AsseticBundle\\Templating\\StaticAsseticHelper',
            'assetic.php_formula_loader.class' =&gt; 'Symfony\\Bundle\\AsseticBundle\\Factory\\Loader\\AsseticHelperFormulaLoader',
            'assetic.debug' =&gt; true,
            'assetic.use_controller' =&gt; true,
            'assetic.enable_profiler' =&gt; false,
            'assetic.read_from' =&gt; ($this-&gt;targetDirs[2].'/../web'),
            'assetic.write_to' =&gt; ($this-&gt;targetDirs[2].'/../web'),
            'assetic.variables' =&gt; array(

            ),
            'assetic.java.bin' =&gt; '/usr/bin/java',
            'assetic.node.bin' =&gt; '/usr/bin/node',
            'assetic.ruby.bin' =&gt; '/usr/bin/ruby',
            'assetic.sass.bin' =&gt; '/usr/bin/sass',
            'assetic.reactjsx.bin' =&gt; '/usr/bin/jsx',
            'assetic.filter.cssrewrite.class' =&gt; 'Assetic\\Filter\\CssRewriteFilter',
            'assetic.twig_extension.functions' =&gt; array(

            ),
            'assetic.controller.class' =&gt; 'Symfony\\Bundle\\AsseticBundle\\Controller\\AsseticController',
            'assetic.routing_loader.class' =&gt; 'Symfony\\Bundle\\AsseticBundle\\Routing\\AsseticLoader',
            'assetic.cache.class' =&gt; 'Assetic\\Cache\\FilesystemCache',
            'assetic.use_controller_worker.class' =&gt; 'Symfony\\Bundle\\AsseticBundle\\Factory\\Worker\\UseControllerWorker',
            'assetic.request_listener.class' =&gt; 'Symfony\\Bundle\\AsseticBundle\\EventListener\\RequestListener',
            'web_profiler.controller.profiler.class' =&gt; 'Symfony\\Bundle\\WebProfilerBundle\\Controller\\ProfilerController',
            'web_profiler.controller.router.class' =&gt; 'Symfony\\Bundle\\WebProfilerBundle\\Controller\\RouterController',
            'web_profiler.controller.exception.class' =&gt; 'Symfony\\Bundle\\WebProfilerBundle\\Controller\\ExceptionController',
            'twig.extension.webprofiler.class' =&gt; 'Symfony\\Bundle\\WebProfilerBundle\\Twig\\WebProfilerExtension',
            'web_profiler.debug_toolbar.position' =&gt; 'bottom',
</codefragment>
  </duplication>
  <duplication lines="68" tokens="153">
    <file path="/var/www/project/app/cache/dev/appDevDebugProjectContainer.php" line="4237"/>
    <file path="/var/www/project/app/cache/test/appTestDebugProjectContainer.php" line="4262"/>
    <codefragment>            'data_collector.templates' =&gt; array(
                'data_collector.request' =&gt; array(
                    0 =&gt; 'request',
                    1 =&gt; '@WebProfiler/Collector/request.html.twig',
                ),
                'data_collector.time' =&gt; array(
                    0 =&gt; 'time',
                    1 =&gt; '@WebProfiler/Collector/time.html.twig',
                ),
                'data_collector.memory' =&gt; array(
                    0 =&gt; 'memory',
                    1 =&gt; '@WebProfiler/Collector/memory.html.twig',
                ),
                'data_collector.ajax' =&gt; array(
                    0 =&gt; 'ajax',
                    1 =&gt; '@WebProfiler/Collector/ajax.html.twig',
                ),
                'data_collector.form' =&gt; array(
                    0 =&gt; 'form',
                    1 =&gt; '@WebProfiler/Collector/form.html.twig',
                ),
                'data_collector.exception' =&gt; array(
                    0 =&gt; 'exception',
                    1 =&gt; '@WebProfiler/Collector/exception.html.twig',
                ),
                'data_collector.logger' =&gt; array(
                    0 =&gt; 'logger',
                    1 =&gt; '@WebProfiler/Collector/logger.html.twig',
                ),
                'data_collector.events' =&gt; array(
                    0 =&gt; 'events',
                    1 =&gt; '@WebProfiler/Collector/events.html.twig',
                ),
                'data_collector.router' =&gt; array(
                    0 =&gt; 'router',
                    1 =&gt; '@WebProfiler/Collector/router.html.twig',
                ),
                'data_collector.translation' =&gt; array(
                    0 =&gt; 'translation',
                    1 =&gt; '@WebProfiler/Collector/translation.html.twig',
                ),
                'data_collector.security' =&gt; array(
                    0 =&gt; 'security',
                    1 =&gt; '@Security/Collector/security.html.twig',
                ),
                'data_collector.twig' =&gt; array(
                    0 =&gt; 'twig',
                    1 =&gt; '@WebProfiler/Collector/twig.html.twig',
                ),
                'data_collector.doctrine' =&gt; array(
                    0 =&gt; 'db',
                    1 =&gt; '@Doctrine/Collector/db.html.twig',
                ),
                'swiftmailer.data_collector' =&gt; array(
                    0 =&gt; 'swiftmailer',
                    1 =&gt; '@Swiftmailer/Collector/swiftmailer.html.twig',
                ),
                'data_collector.dump' =&gt; array(
                    0 =&gt; 'dump',
                    1 =&gt; '@Debug/Profiler/dump.html.twig',
                ),
                'data_collector.config' =&gt; array(
                    0 =&gt; 'config',
                    1 =&gt; '@WebProfiler/Collector/config.html.twig',
                ),
            ),
            'console.command.ids' =&gt; array(
                0 =&gt; 'sensio_distribution.security_checker.command',
</codefragment>
  </duplication>
</pmd-cpd>
